
Test_Uart_006_WL55JC1_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004674  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080047ac  080047ac  000147ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004890  08004890  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08004890  08004890  00014890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004898  08004898  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004898  08004898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800489c  0800489c  0001489c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080048a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000002c  080048cc  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080048cc  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe7e  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c4  00000000  00000000  0002fed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00032198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00033180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001befe  00000000  00000000  000340b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9e9  00000000  00000000  0004ffae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afc4c  00000000  00000000  0005e997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e5e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c0  00000000  00000000  0010e634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000002c 	.word	0x2000002c
 8000154:	00000000 	.word	0x00000000
 8000158:	08004794 	.word	0x08004794

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000030 	.word	0x20000030
 8000174:	08004794 	.word	0x08004794

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b974 	b.w	8000488 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9e08      	ldr	r6, [sp, #32]
 80001be:	460d      	mov	r5, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	4688      	mov	r8, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14d      	bne.n	8000264 <__udivmoddi4+0xac>
 80001c8:	428a      	cmp	r2, r1
 80001ca:	4694      	mov	ip, r2
 80001cc:	d968      	bls.n	80002a0 <__udivmoddi4+0xe8>
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	b152      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d4:	fa01 f302 	lsl.w	r3, r1, r2
 80001d8:	f1c2 0120 	rsb	r1, r2, #32
 80001dc:	fa20 f101 	lsr.w	r1, r0, r1
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	ea41 0803 	orr.w	r8, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	fbb8 fef5 	udiv	lr, r8, r5
 80001f4:	fa1f f78c 	uxth.w	r7, ip
 80001f8:	fb05 831e 	mls	r3, r5, lr, r8
 80001fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000200:	fb0e f107 	mul.w	r1, lr, r7
 8000204:	4299      	cmp	r1, r3
 8000206:	d90b      	bls.n	8000220 <__udivmoddi4+0x68>
 8000208:	eb1c 0303 	adds.w	r3, ip, r3
 800020c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000210:	f080 811e 	bcs.w	8000450 <__udivmoddi4+0x298>
 8000214:	4299      	cmp	r1, r3
 8000216:	f240 811b 	bls.w	8000450 <__udivmoddi4+0x298>
 800021a:	f1ae 0e02 	sub.w	lr, lr, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0f5 	udiv	r0, r3, r5
 8000228:	fb05 3310 	mls	r3, r5, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 f707 	mul.w	r7, r0, r7
 8000234:	42a7      	cmp	r7, r4
 8000236:	d90a      	bls.n	800024e <__udivmoddi4+0x96>
 8000238:	eb1c 0404 	adds.w	r4, ip, r4
 800023c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000240:	f080 8108 	bcs.w	8000454 <__udivmoddi4+0x29c>
 8000244:	42a7      	cmp	r7, r4
 8000246:	f240 8105 	bls.w	8000454 <__udivmoddi4+0x29c>
 800024a:	4464      	add	r4, ip
 800024c:	3802      	subs	r0, #2
 800024e:	1be4      	subs	r4, r4, r7
 8000250:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000254:	2100      	movs	r1, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa8>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	428b      	cmp	r3, r1
 8000266:	d908      	bls.n	800027a <__udivmoddi4+0xc2>
 8000268:	2e00      	cmp	r6, #0
 800026a:	f000 80ee 	beq.w	800044a <__udivmoddi4+0x292>
 800026e:	2100      	movs	r1, #0
 8000270:	e9c6 0500 	strd	r0, r5, [r6]
 8000274:	4608      	mov	r0, r1
 8000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027a:	fab3 f183 	clz	r1, r3
 800027e:	2900      	cmp	r1, #0
 8000280:	d14a      	bne.n	8000318 <__udivmoddi4+0x160>
 8000282:	42ab      	cmp	r3, r5
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xd4>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80f9 	bhi.w	800047e <__udivmoddi4+0x2c6>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb65 0303 	sbc.w	r3, r5, r3
 8000292:	2001      	movs	r0, #1
 8000294:	4698      	mov	r8, r3
 8000296:	2e00      	cmp	r6, #0
 8000298:	d0e2      	beq.n	8000260 <__udivmoddi4+0xa8>
 800029a:	e9c6 4800 	strd	r4, r8, [r6]
 800029e:	e7df      	b.n	8000260 <__udivmoddi4+0xa8>
 80002a0:	b902      	cbnz	r2, 80002a4 <__udivmoddi4+0xec>
 80002a2:	deff      	udf	#255	; 0xff
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	f040 8091 	bne.w	80003d0 <__udivmoddi4+0x218>
 80002ae:	eba1 050c 	sub.w	r5, r1, ip
 80002b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b6:	fa1f fe8c 	uxth.w	lr, ip
 80002ba:	2101      	movs	r1, #1
 80002bc:	fbb5 f3f7 	udiv	r3, r5, r7
 80002c0:	fb07 5013 	mls	r0, r7, r3, r5
 80002c4:	0c25      	lsrs	r5, r4, #16
 80002c6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ca:	fb0e f003 	mul.w	r0, lr, r3
 80002ce:	42a8      	cmp	r0, r5
 80002d0:	d908      	bls.n	80002e4 <__udivmoddi4+0x12c>
 80002d2:	eb1c 0505 	adds.w	r5, ip, r5
 80002d6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x12a>
 80002dc:	42a8      	cmp	r0, r5
 80002de:	f200 80cb 	bhi.w	8000478 <__udivmoddi4+0x2c0>
 80002e2:	4643      	mov	r3, r8
 80002e4:	1a2d      	subs	r5, r5, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ec:	fb07 5510 	mls	r5, r7, r0, r5
 80002f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002f4:	fb0e fe00 	mul.w	lr, lr, r0
 80002f8:	45a6      	cmp	lr, r4
 80002fa:	d908      	bls.n	800030e <__udivmoddi4+0x156>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 35ff 	add.w	r5, r0, #4294967295
 8000304:	d202      	bcs.n	800030c <__udivmoddi4+0x154>
 8000306:	45a6      	cmp	lr, r4
 8000308:	f200 80bb 	bhi.w	8000482 <__udivmoddi4+0x2ca>
 800030c:	4628      	mov	r0, r5
 800030e:	eba4 040e 	sub.w	r4, r4, lr
 8000312:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000316:	e79e      	b.n	8000256 <__udivmoddi4+0x9e>
 8000318:	f1c1 0720 	rsb	r7, r1, #32
 800031c:	408b      	lsls	r3, r1
 800031e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000322:	ea4c 0c03 	orr.w	ip, ip, r3
 8000326:	fa20 f407 	lsr.w	r4, r0, r7
 800032a:	fa05 f301 	lsl.w	r3, r5, r1
 800032e:	431c      	orrs	r4, r3
 8000330:	40fd      	lsrs	r5, r7
 8000332:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fbb5 f8f9 	udiv	r8, r5, r9
 800033e:	0c20      	lsrs	r0, r4, #16
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	fb09 5518 	mls	r5, r9, r8, r5
 8000348:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800034c:	fb08 f00e 	mul.w	r0, r8, lr
 8000350:	42a8      	cmp	r0, r5
 8000352:	fa02 f201 	lsl.w	r2, r2, r1
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b8>
 8000358:	eb1c 0505 	adds.w	r5, ip, r5
 800035c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000360:	f080 8088 	bcs.w	8000474 <__udivmoddi4+0x2bc>
 8000364:	42a8      	cmp	r0, r5
 8000366:	f240 8085 	bls.w	8000474 <__udivmoddi4+0x2bc>
 800036a:	f1a8 0802 	sub.w	r8, r8, #2
 800036e:	4465      	add	r5, ip
 8000370:	1a2d      	subs	r5, r5, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb5 f0f9 	udiv	r0, r5, r9
 8000378:	fb09 5510 	mls	r5, r9, r0, r5
 800037c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45ae      	cmp	lr, r5
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1e2>
 8000388:	eb1c 0505 	adds.w	r5, ip, r5
 800038c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000390:	d26c      	bcs.n	800046c <__udivmoddi4+0x2b4>
 8000392:	45ae      	cmp	lr, r5
 8000394:	d96a      	bls.n	800046c <__udivmoddi4+0x2b4>
 8000396:	3802      	subs	r0, #2
 8000398:	4465      	add	r5, ip
 800039a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800039e:	fba0 9402 	umull	r9, r4, r0, r2
 80003a2:	eba5 050e 	sub.w	r5, r5, lr
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	46c8      	mov	r8, r9
 80003aa:	46a6      	mov	lr, r4
 80003ac:	d356      	bcc.n	800045c <__udivmoddi4+0x2a4>
 80003ae:	d053      	beq.n	8000458 <__udivmoddi4+0x2a0>
 80003b0:	b15e      	cbz	r6, 80003ca <__udivmoddi4+0x212>
 80003b2:	ebb3 0208 	subs.w	r2, r3, r8
 80003b6:	eb65 050e 	sbc.w	r5, r5, lr
 80003ba:	fa05 f707 	lsl.w	r7, r5, r7
 80003be:	fa22 f301 	lsr.w	r3, r2, r1
 80003c2:	40cd      	lsrs	r5, r1
 80003c4:	431f      	orrs	r7, r3
 80003c6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ca:	2100      	movs	r1, #0
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f103 	lsr.w	r1, r0, r3
 80003d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003dc:	fa25 f303 	lsr.w	r3, r5, r3
 80003e0:	4095      	lsls	r5, r2
 80003e2:	430d      	orrs	r5, r1
 80003e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3011 	mls	r0, r7, r1, r3
 80003f4:	0c2b      	lsrs	r3, r5, #16
 80003f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003fa:	fb01 f00e 	mul.w	r0, r1, lr
 80003fe:	4298      	cmp	r0, r3
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x260>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f101 38ff 	add.w	r8, r1, #4294967295
 800040e:	d22f      	bcs.n	8000470 <__udivmoddi4+0x2b8>
 8000410:	4298      	cmp	r0, r3
 8000412:	d92d      	bls.n	8000470 <__udivmoddi4+0x2b8>
 8000414:	3902      	subs	r1, #2
 8000416:	4463      	add	r3, ip
 8000418:	1a1b      	subs	r3, r3, r0
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000420:	fb07 3310 	mls	r3, r7, r0, r3
 8000424:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000428:	fb00 f30e 	mul.w	r3, r0, lr
 800042c:	42ab      	cmp	r3, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x28a>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 38ff 	add.w	r8, r0, #4294967295
 8000438:	d216      	bcs.n	8000468 <__udivmoddi4+0x2b0>
 800043a:	42ab      	cmp	r3, r5
 800043c:	d914      	bls.n	8000468 <__udivmoddi4+0x2b0>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	1aed      	subs	r5, r5, r3
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	e738      	b.n	80002bc <__udivmoddi4+0x104>
 800044a:	4631      	mov	r1, r6
 800044c:	4630      	mov	r0, r6
 800044e:	e707      	b.n	8000260 <__udivmoddi4+0xa8>
 8000450:	4686      	mov	lr, r0
 8000452:	e6e5      	b.n	8000220 <__udivmoddi4+0x68>
 8000454:	4618      	mov	r0, r3
 8000456:	e6fa      	b.n	800024e <__udivmoddi4+0x96>
 8000458:	454b      	cmp	r3, r9
 800045a:	d2a9      	bcs.n	80003b0 <__udivmoddi4+0x1f8>
 800045c:	ebb9 0802 	subs.w	r8, r9, r2
 8000460:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000464:	3801      	subs	r0, #1
 8000466:	e7a3      	b.n	80003b0 <__udivmoddi4+0x1f8>
 8000468:	4640      	mov	r0, r8
 800046a:	e7ea      	b.n	8000442 <__udivmoddi4+0x28a>
 800046c:	4620      	mov	r0, r4
 800046e:	e794      	b.n	800039a <__udivmoddi4+0x1e2>
 8000470:	4641      	mov	r1, r8
 8000472:	e7d1      	b.n	8000418 <__udivmoddi4+0x260>
 8000474:	46d0      	mov	r8, sl
 8000476:	e77b      	b.n	8000370 <__udivmoddi4+0x1b8>
 8000478:	3b02      	subs	r3, #2
 800047a:	4465      	add	r5, ip
 800047c:	e732      	b.n	80002e4 <__udivmoddi4+0x12c>
 800047e:	4608      	mov	r0, r1
 8000480:	e709      	b.n	8000296 <__udivmoddi4+0xde>
 8000482:	4464      	add	r4, ip
 8000484:	3802      	subs	r0, #2
 8000486:	e742      	b.n	800030e <__udivmoddi4+0x156>

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80004a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004a8:	f023 0218 	bic.w	r2, r3, #24
 80004ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4313      	orrs	r3, r2
 80004b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b085      	sub	sp, #20
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4013      	ands	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	bf00      	nop
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr

080004f2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b085      	sub	sp, #20
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4313      	orrs	r3, r2
 8000508:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800050a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800050e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4013      	ands	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fae4 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f82c 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f92e 	bl	8000790 <MX_GPIO_Init>
  MX_DMA_Init();
 8000534:	f000 f91a 	bl	800076c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000538:	f000 f8cc 	bl	80006d4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800053c:	f000 f87e 	bl	800063c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) hello , strlen ( hello ) , UART_TX_TIMEOUT ) ;
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <main+0x50>)
 8000542:	f7ff fe19 	bl	8000178 <strlen>
 8000546:	4603      	mov	r3, r0
 8000548:	b29a      	uxth	r2, r3
 800054a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800054e:	4909      	ldr	r1, [pc, #36]	; (8000574 <main+0x50>)
 8000550:	4809      	ldr	r0, [pc, #36]	; (8000578 <main+0x54>)
 8000552:	f002 fd04 	bl	8002f5e <HAL_UART_Transmit>
 8000556:	4603      	mov	r3, r0
 8000558:	461a      	mov	r2, r3
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <main+0x58>)
 800055c:	701a      	strb	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 800055e:	220c      	movs	r2, #12
 8000560:	4907      	ldr	r1, [pc, #28]	; (8000580 <main+0x5c>)
 8000562:	4808      	ldr	r0, [pc, #32]	; (8000584 <main+0x60>)
 8000564:	f004 f842 	bl	80045ec <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000568:	2001      	movs	r0, #1
 800056a:	f001 f94f 	bl	800180c <HAL_PWREx_ReleaseCore>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  __NOP () ;
 800056e:	bf00      	nop
 8000570:	e7fd      	b.n	800056e <main+0x4a>
 8000572:	bf00      	nop
 8000574:	20000004 	.word	0x20000004
 8000578:	200000d8 	.word	0x200000d8
 800057c:	200001c8 	.word	0x200001c8
 8000580:	200001cc 	.word	0x200001cc
 8000584:	20000048 	.word	0x20000048

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b09a      	sub	sp, #104	; 0x68
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2248      	movs	r2, #72	; 0x48
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f004 f8f4 	bl	8004784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]
 80005aa:	615a      	str	r2, [r3, #20]
 80005ac:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ae:	f001 f905 	bl	80017bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ff70 	bl	8000498 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xb0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005c0:	4a1d      	ldr	r2, [pc, #116]	; (8000638 <SystemClock_Config+0xb0>)
 80005c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <SystemClock_Config+0xb0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005d4:	2324      	movs	r3, #36	; 0x24
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005d8:	2381      	movs	r3, #129	; 0x81
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e4:	2360      	movs	r3, #96	; 0x60
 80005e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fbcd 	bl	8001d90 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005fc:	f000 f90c 	bl	8000818 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000600:	236f      	movs	r3, #111	; 0x6f
 8000602:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f001 ff51 	bl	80024c8 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800062c:	f000 f8f4 	bl	8000818 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3768      	adds	r7, #104	; 0x68
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58000400 	.word	0x58000400

0800063c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_USART1_UART_Init+0x90>)
 8000642:	4a23      	ldr	r2, [pc, #140]	; (80006d0 <MX_USART1_UART_Init+0x94>)
 8000644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <MX_USART1_UART_Init+0x90>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <MX_USART1_UART_Init+0x90>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_USART1_UART_Init+0x90>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <MX_USART1_UART_Init+0x90>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_USART1_UART_Init+0x90>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_USART1_UART_Init+0x90>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_USART1_UART_Init+0x90>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_USART1_UART_Init+0x90>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_USART1_UART_Init+0x90>)
 800067a:	2200      	movs	r2, #0
 800067c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_USART1_UART_Init+0x90>)
 8000680:	2200      	movs	r2, #0
 8000682:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000684:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_USART1_UART_Init+0x90>)
 8000686:	f002 fc1a 	bl	8002ebe <HAL_UART_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000690:	f000 f8c2 	bl	8000818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000694:	2100      	movs	r1, #0
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <MX_USART1_UART_Init+0x90>)
 8000698:	f003 ff2c 	bl	80044f4 <HAL_UARTEx_SetTxFifoThreshold>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006a2:	f000 f8b9 	bl	8000818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a6:	2100      	movs	r1, #0
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <MX_USART1_UART_Init+0x90>)
 80006aa:	f003 ff61 	bl	8004570 <HAL_UARTEx_SetRxFifoThreshold>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006b4:	f000 f8b0 	bl	8000818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_USART1_UART_Init+0x90>)
 80006ba:	f003 fee3 	bl	8004484 <HAL_UARTEx_DisableFifoMode>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006c4:	f000 f8a8 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000048 	.word	0x20000048
 80006d0:	40013800 	.word	0x40013800

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <MX_USART2_UART_Init+0x90>)
 80006da:	4a23      	ldr	r2, [pc, #140]	; (8000768 <MX_USART2_UART_Init+0x94>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <MX_USART2_UART_Init+0x90>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_USART2_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_USART2_UART_Init+0x90>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_USART2_UART_Init+0x90>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_USART2_UART_Init+0x90>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_USART2_UART_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_USART2_UART_Init+0x90>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_USART2_UART_Init+0x90>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_USART2_UART_Init+0x90>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_USART2_UART_Init+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071c:	4811      	ldr	r0, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x90>)
 800071e:	f002 fbce 	bl	8002ebe <HAL_UART_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000728:	f000 f876 	bl	8000818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800072c:	2100      	movs	r1, #0
 800072e:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_USART2_UART_Init+0x90>)
 8000730:	f003 fee0 	bl	80044f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800073a:	f000 f86d 	bl	8000818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800073e:	2100      	movs	r1, #0
 8000740:	4808      	ldr	r0, [pc, #32]	; (8000764 <MX_USART2_UART_Init+0x90>)
 8000742:	f003 ff15 	bl	8004570 <HAL_UARTEx_SetRxFifoThreshold>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800074c:	f000 f864 	bl	8000818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_USART2_UART_Init+0x90>)
 8000752:	f003 fe97 	bl	8004484 <HAL_UARTEx_DisableFifoMode>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800075c:	f000 f85c 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000d8 	.word	0x200000d8
 8000768:	40004400 	.word	0x40004400

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000770:	2004      	movs	r0, #4
 8000772:	f7ff fea6 	bl	80004c2 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff fea3 	bl	80004c2 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	200b      	movs	r0, #11
 8000782:	f000 fb04 	bl	8000d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000786:	200b      	movs	r0, #11
 8000788:	f000 fb1b 	bl	8000dc2 <HAL_NVIC_EnableIRQ>

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff feac 	bl	80004f2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2004      	movs	r0, #4
 800079c:	f7ff fea9 	bl	80004f2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a0:	2002      	movs	r0, #2
 80007a2:	f7ff fea6 	bl	80004f2 <LL_AHB2_GRP1_EnableClock>

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	807b      	strh	r3, [r7, #2]
	uint16_t s1 = Size ;
 80007b8:	887b      	ldrh	r3, [r7, #2]
 80007ba:	81fb      	strh	r3, [r7, #14]
    if ( huart->Instance == USART1 ) ;
    uint16_t l = strlen ( (const char*) rx_buff ) ;
 80007bc:	4812      	ldr	r0, [pc, #72]	; (8000808 <HAL_UARTEx_RxEventCallback+0x5c>)
 80007be:	f7ff fcdb 	bl	8000178 <strlen>
 80007c2:	4603      	mov	r3, r0
 80007c4:	81bb      	strh	r3, [r7, #12]
    uint16_t s2 = sizeof ( rx_buff ) ;
 80007c6:	230c      	movs	r3, #12
 80007c8:	817b      	strh	r3, [r7, #10]
    if ( rx_buff[0] != 0x00 )
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <HAL_UARTEx_RxEventCallback+0x5c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d011      	beq.n	80007f6 <HAL_UARTEx_RxEventCallback+0x4a>
    {
        //cpy_buff ( (const char*) rx_buff , tx_buff ) ;
    	//strcpy ( (char*) tx_buff , (const char*) rx_buff ) ;
        //rx_buff[0] = 0x00 ;
        uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) rx_buff ,  strlen ( (char*) rx_buff ) , UART_TX_TIMEOUT ) ;
 80007d2:	480d      	ldr	r0, [pc, #52]	; (8000808 <HAL_UARTEx_RxEventCallback+0x5c>)
 80007d4:	f7ff fcd0 	bl	8000178 <strlen>
 80007d8:	4603      	mov	r3, r0
 80007da:	b29a      	uxth	r2, r3
 80007dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80007e0:	4909      	ldr	r1, [pc, #36]	; (8000808 <HAL_UARTEx_RxEventCallback+0x5c>)
 80007e2:	480a      	ldr	r0, [pc, #40]	; (800080c <HAL_UARTEx_RxEventCallback+0x60>)
 80007e4:	f002 fbbb 	bl	8002f5e <HAL_UART_Transmit>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_UARTEx_RxEventCallback+0x64>)
 80007ee:	701a      	strb	r2, [r3, #0]
        rx_buff[0] = 0x00 ;
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <HAL_UARTEx_RxEventCallback+0x5c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
    }
    HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 80007f6:	220c      	movs	r2, #12
 80007f8:	4903      	ldr	r1, [pc, #12]	; (8000808 <HAL_UARTEx_RxEventCallback+0x5c>)
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <HAL_UARTEx_RxEventCallback+0x68>)
 80007fc:	f003 fef6 	bl	80045ec <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200001cc 	.word	0x200001cc
 800080c:	200000d8 	.word	0x200000d8
 8000810:	200001c8 	.word	0x200001c8
 8000814:	20000048 	.word	0x20000048

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>

08000822 <LL_AHB2_GRP1_EnableClock>:
{
 8000822:	b480      	push	{r7}
 8000824:	b085      	sub	sp, #20
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800082a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000830:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4313      	orrs	r3, r2
 8000838:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800083a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800083e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4013      	ands	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000852:	b480      	push	{r7}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800085a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800085e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4313      	orrs	r3, r2
 8000868:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800086a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800086e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4013      	ands	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000882:	b480      	push	{r7}
 8000884:	b085      	sub	sp, #20
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800088a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4313      	orrs	r3, r2
 8000898:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800089a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4013      	ands	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
	...

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b096      	sub	sp, #88	; 0x58
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2238      	movs	r2, #56	; 0x38
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 ff4f 	bl	8004784 <memset>
  if(huart->Instance==USART1)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a4a      	ldr	r2, [pc, #296]	; (8000a14 <HAL_UART_MspInit+0x154>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d160      	bne.n	80009b2 <HAL_UART_MspInit+0xf2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80008f8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 f9a2 	bl	8002c48 <HAL_RCCEx_PeriphCLKConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800090a:	f7ff ff85 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000912:	f7ff ffb6 	bl	8000882 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff ff83 	bl	8000822 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800091c:	23c0      	movs	r3, #192	; 0xc0
 800091e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800092c:	2307      	movs	r3, #7
 800092e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000934:	4619      	mov	r1, r3
 8000936:	4838      	ldr	r0, [pc, #224]	; (8000a18 <HAL_UART_MspInit+0x158>)
 8000938:	f000 fde0 	bl	80014fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800093c:	4b37      	ldr	r3, [pc, #220]	; (8000a1c <HAL_UART_MspInit+0x15c>)
 800093e:	4a38      	ldr	r2, [pc, #224]	; (8000a20 <HAL_UART_MspInit+0x160>)
 8000940:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000942:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <HAL_UART_MspInit+0x15c>)
 8000944:	2211      	movs	r2, #17
 8000946:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000948:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <HAL_UART_MspInit+0x15c>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800094e:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <HAL_UART_MspInit+0x15c>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000954:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <HAL_UART_MspInit+0x15c>)
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800095a:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <HAL_UART_MspInit+0x15c>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000960:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <HAL_UART_MspInit+0x15c>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <HAL_UART_MspInit+0x15c>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <HAL_UART_MspInit+0x15c>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000972:	482a      	ldr	r0, [pc, #168]	; (8000a1c <HAL_UART_MspInit+0x15c>)
 8000974:	f000 fa40 	bl	8000df8 <HAL_DMA_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800097e:	f7ff ff4b 	bl	8000818 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000982:	2110      	movs	r1, #16
 8000984:	4825      	ldr	r0, [pc, #148]	; (8000a1c <HAL_UART_MspInit+0x15c>)
 8000986:	f000 fce1 	bl	800134c <HAL_DMA_ConfigChannelAttributes>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 8000990:	f7ff ff42 	bl	8000818 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <HAL_UART_MspInit+0x15c>)
 8000998:	67da      	str	r2, [r3, #124]	; 0x7c
 800099a:	4a20      	ldr	r2, [pc, #128]	; (8000a1c <HAL_UART_MspInit+0x15c>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2024      	movs	r0, #36	; 0x24
 80009a6:	f000 f9f2 	bl	8000d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009aa:	2024      	movs	r0, #36	; 0x24
 80009ac:	f000 fa09 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b0:	e02b      	b.n	8000a0a <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART2)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a1b      	ldr	r2, [pc, #108]	; (8000a24 <HAL_UART_MspInit+0x164>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d126      	bne.n	8000a0a <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009bc:	2302      	movs	r3, #2
 80009be:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009c0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80009c4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 f93c 	bl	8002c48 <HAL_RCCEx_PeriphCLKConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_UART_MspInit+0x11a>
      Error_Handler();
 80009d6:	f7ff ff1f 	bl	8000818 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009da:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80009de:	f7ff ff38 	bl	8000852 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff ff1d 	bl	8000822 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80009e8:	230c      	movs	r3, #12
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f8:	2307      	movs	r3, #7
 80009fa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a00:	4619      	mov	r1, r3
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a06:	f000 fd79 	bl	80014fc <HAL_GPIO_Init>
}
 8000a0a:	bf00      	nop
 8000a0c:	3758      	adds	r7, #88	; 0x58
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40013800 	.word	0x40013800
 8000a18:	48000400 	.word	0x48000400
 8000a1c:	20000168 	.word	0x20000168
 8000a20:	40020008 	.word	0x40020008
 8000a24:	40004400 	.word	0x40004400

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr

08000a6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6e:	f000 f89b 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <DMA1_Channel1_IRQHandler+0x10>)
 8000a7e:	f000 fb9f 	bl	80011c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000168 	.word	0x20000168

08000a8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <USART1_IRQHandler+0x10>)
 8000a92:	f002 fafb 	bl	800308c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000048 	.word	0x20000048

08000aa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aa2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa4:	f7ff fcf2 	bl	800048c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ace:	f003 fe35 	bl	800473c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad2:	f7ff fd27 	bl	8000524 <main>

08000ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
  ldr   r0, =_estack
 8000ad8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000ae4:	080048a0 	.word	0x080048a0
  ldr r2, =_sbss
 8000ae8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000aec:	200001dc 	.word	0x200001dc

08000af0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afe:	2003      	movs	r0, #3
 8000b00:	f000 f93a 	bl	8000d78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000b04:	f001 fec2 	bl	800288c <HAL_RCC_GetHCLKFreq>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <HAL_Init+0x3c>)
 8000b0c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f810 	bl	8000b34 <HAL_InitTick>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	e001      	b.n	8000b24 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b20:	f7ff fec7 	bl	80008b2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b24:	79fb      	ldrb	r3, [r7, #7]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000000 	.word	0x20000000

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_InitTick+0x6c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d024      	beq.n	8000b92 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b48:	f001 fea0 	bl	800288c <HAL_RCC_GetHCLKFreq>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_InitTick+0x6c>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	4619      	mov	r1, r3
 8000b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b58:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 f93c 	bl	8000dde <HAL_SYSTICK_Config>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d10f      	bne.n	8000b8c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	d809      	bhi.n	8000b86 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b72:	2200      	movs	r2, #0
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7a:	f000 f908 	bl	8000d8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b7e:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <HAL_InitTick+0x70>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	e007      	b.n	8000b96 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	e004      	b.n	8000b96 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	73fb      	strb	r3, [r7, #15]
 8000b90:	e001      	b.n	8000b96 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000028 	.word	0x20000028
 8000ba4:	20000024 	.word	0x20000024

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_IncTick+0x1c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a03      	ldr	r2, [pc, #12]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	20000028 	.word	0x20000028
 8000bc8:	200001d8 	.word	0x200001d8

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b02      	ldr	r3, [pc, #8]	; (8000bdc <HAL_GetTick+0x10>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	200001d8 	.word	0x200001d8

08000be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c12:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	60d3      	str	r3, [r2, #12]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <__NVIC_GetPriorityGrouping+0x18>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	f003 0307 	and.w	r3, r3, #7
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	db0b      	blt.n	8000c6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f003 021f 	and.w	r2, r3, #31
 8000c5c:	4906      	ldr	r1, [pc, #24]	; (8000c78 <__NVIC_EnableIRQ+0x34>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	095b      	lsrs	r3, r3, #5
 8000c64:	2001      	movs	r0, #1
 8000c66:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d44:	d301      	bcc.n	8000d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00f      	b.n	8000d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <SysTick_Config+0x40>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d52:	210f      	movs	r1, #15
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f7ff ff90 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <SysTick_Config+0x40>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <SysTick_Config+0x40>)
 8000d64:	2207      	movs	r2, #7
 8000d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	e000e010 	.word	0xe000e010

08000d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ff2d 	bl	8000be0 <__NVIC_SetPriorityGrouping>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff44 	bl	8000c28 <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff92 	bl	8000cd0 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff61 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff37 	bl	8000c44 <__NVIC_EnableIRQ>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffa4 	bl	8000d34 <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e08e      	b.n	8000f28 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b47      	ldr	r3, [pc, #284]	; (8000f30 <HAL_DMA_Init+0x138>)
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d80f      	bhi.n	8000e36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b45      	ldr	r3, [pc, #276]	; (8000f34 <HAL_DMA_Init+0x13c>)
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a45      	ldr	r2, [pc, #276]	; (8000f38 <HAL_DMA_Init+0x140>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	009a      	lsls	r2, r3, #2
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a42      	ldr	r2, [pc, #264]	; (8000f3c <HAL_DMA_Init+0x144>)
 8000e32:	641a      	str	r2, [r3, #64]	; 0x40
 8000e34:	e00e      	b.n	8000e54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b40      	ldr	r3, [pc, #256]	; (8000f40 <HAL_DMA_Init+0x148>)
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a3d      	ldr	r2, [pc, #244]	; (8000f38 <HAL_DMA_Init+0x140>)
 8000e42:	fba2 2303 	umull	r2, r3, r2, r3
 8000e46:	091b      	lsrs	r3, r3, #4
 8000e48:	009a      	lsls	r2, r3, #2
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a3c      	ldr	r2, [pc, #240]	; (8000f44 <HAL_DMA_Init+0x14c>)
 8000e52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2202      	movs	r2, #2
 8000e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e6e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	431a      	orrs	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	431a      	orrs	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 fabc 	bl	8001424 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000eb4:	d102      	bne.n	8000ebc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ec8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000ed2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d010      	beq.n	8000efe <HAL_DMA_Init+0x106>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	d80c      	bhi.n	8000efe <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 fae5 	bl	80014b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	e008      	b.n	8000f10 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020407 	.word	0x40020407
 8000f34:	bffdfff8 	.word	0xbffdfff8
 8000f38:	cccccccd 	.word	0xcccccccd
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	bffdfbf8 	.word	0xbffdfbf8
 8000f44:	40020400 	.word	0x40020400

08000f48 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d101      	bne.n	8000f68 <HAL_DMA_Start_IT+0x20>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e069      	b.n	800103c <HAL_DMA_Start_IT+0xf4>
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d155      	bne.n	8001028 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2202      	movs	r2, #2
 8000f80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2200      	movs	r2, #0
 8000f88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0201 	bic.w	r2, r2, #1
 8000f98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f000 fa02 	bl	80013aa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d008      	beq.n	8000fc0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f042 020e 	orr.w	r2, r2, #14
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e00f      	b.n	8000fe0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 0204 	bic.w	r2, r2, #4
 8000fce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 020a 	orr.w	r2, r2, #10
 8000fde:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ffc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001002:	2b00      	cmp	r3, #0
 8001004:	d007      	beq.n	8001016 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001014:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f042 0201 	orr.w	r2, r2, #1
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	e008      	b.n	800103a <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800103a:	7dfb      	ldrb	r3, [r7, #23]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e04f      	b.n	80010f6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d008      	beq.n	8001074 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2204      	movs	r2, #4
 8001066:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e040      	b.n	80010f6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 020e 	bic.w	r2, r2, #14
 8001082:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001092:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a8:	f003 021c 	and.w	r2, r3, #28
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	2101      	movs	r1, #1
 80010b2:	fa01 f202 	lsl.w	r2, r1, r2
 80010b6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00c      	beq.n	80010e4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d005      	beq.n	8001124 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2204      	movs	r2, #4
 800111c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e047      	b.n	80011b4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 020e 	bic.w	r2, r2, #14
 8001132:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0201 	bic.w	r2, r2, #1
 8001142:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800114e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001152:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001158:	f003 021c 	and.w	r2, r3, #28
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	2101      	movs	r1, #1
 8001162:	fa01 f202 	lsl.w	r2, r1, r2
 8001166:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001170:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00c      	beq.n	8001194 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001188:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001192:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	4798      	blx	r3
    }
  }
  return status;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011dc:	f003 031c 	and.w	r3, r3, #28
 80011e0:	2204      	movs	r2, #4
 80011e2:	409a      	lsls	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d027      	beq.n	800123c <HAL_DMA_IRQHandler+0x7c>
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d022      	beq.n	800123c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0320 	and.w	r3, r3, #32
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0204 	bic.w	r2, r2, #4
 8001212:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001218:	f003 021c 	and.w	r2, r3, #28
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	2104      	movs	r1, #4
 8001222:	fa01 f202 	lsl.w	r2, r1, r2
 8001226:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 8081 	beq.w	8001334 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800123a:	e07b      	b.n	8001334 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001240:	f003 031c 	and.w	r3, r3, #28
 8001244:	2202      	movs	r2, #2
 8001246:	409a      	lsls	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d03d      	beq.n	80012cc <HAL_DMA_IRQHandler+0x10c>
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d038      	beq.n	80012cc <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0320 	and.w	r3, r3, #32
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10b      	bne.n	8001280 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 020a 	bic.w	r2, r2, #10
 8001276:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <HAL_DMA_IRQHandler+0x180>)
 8001288:	429a      	cmp	r2, r3
 800128a:	d909      	bls.n	80012a0 <HAL_DMA_IRQHandler+0xe0>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001290:	f003 031c 	and.w	r3, r3, #28
 8001294:	4a2b      	ldr	r2, [pc, #172]	; (8001344 <HAL_DMA_IRQHandler+0x184>)
 8001296:	2102      	movs	r1, #2
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	6053      	str	r3, [r2, #4]
 800129e:	e008      	b.n	80012b2 <HAL_DMA_IRQHandler+0xf2>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	f003 031c 	and.w	r3, r3, #28
 80012a8:	4a27      	ldr	r2, [pc, #156]	; (8001348 <HAL_DMA_IRQHandler+0x188>)
 80012aa:	2102      	movs	r1, #2
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d038      	beq.n	8001334 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80012ca:	e033      	b.n	8001334 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	f003 031c 	and.w	r3, r3, #28
 80012d4:	2208      	movs	r2, #8
 80012d6:	409a      	lsls	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d02a      	beq.n	8001336 <HAL_DMA_IRQHandler+0x176>
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d025      	beq.n	8001336 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 020e 	bic.w	r2, r2, #14
 80012f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f003 021c 	and.w	r2, r3, #28
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	2101      	movs	r1, #1
 8001308:	fa01 f202 	lsl.w	r2, r1, r2
 800130c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001328:	2b00      	cmp	r3, #0
 800132a:	d004      	beq.n	8001336 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001334:	bf00      	nop
 8001336:	bf00      	nop
}
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40020080 	.word	0x40020080
 8001344:	40020400 	.word	0x40020400
 8001348:	40020000 	.word	0x40020000

0800134c <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d103      	bne.n	8001368 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	72fb      	strb	r3, [r7, #11]
    return status;
 8001364:	7afb      	ldrb	r3, [r7, #11]
 8001366:	e01b      	b.n	80013a0 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00d      	beq.n	8001396 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	e003      	b.n	8001396 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001394:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	601a      	str	r2, [r3, #0]

  return status;
 800139e:	7afb      	ldrb	r3, [r7, #11]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013c0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013d2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	f003 021c 	and.w	r2, r3, #28
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	2101      	movs	r1, #1
 80013e2:	fa01 f202 	lsl.w	r2, r1, r2
 80013e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b10      	cmp	r3, #16
 80013f6:	d108      	bne.n	800140a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001408:	e007      	b.n	800141a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	60da      	str	r2, [r3, #12]
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8001434:	429a      	cmp	r2, r3
 8001436:	d813      	bhi.n	8001460 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001444:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	3b08      	subs	r3, #8
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	e011      	b.n	8001484 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	009a      	lsls	r2, r3, #2
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800146a:	4413      	add	r3, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	3b08      	subs	r3, #8
 8001478:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	3307      	adds	r3, #7
 8001482:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001488:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	2201      	movs	r2, #1
 8001492:	409a      	lsls	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40020407 	.word	0x40020407
 80014a8:	cccccccd 	.word	0xcccccccd
 80014ac:	4002081c 	.word	0x4002081c
 80014b0:	40020880 	.word	0x40020880

080014b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	461a      	mov	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80014d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3b01      	subs	r3, #1
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2201      	movs	r2, #1
 80014e4:	409a      	lsls	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	1000823f 	.word	0x1000823f
 80014f8:	40020940 	.word	0x40020940

080014fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150a:	e140      	b.n	800178e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8132 	beq.w	8001788 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d005      	beq.n	800153c <HAL_GPIO_Init+0x40>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d130      	bne.n	800159e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001572:	2201      	movs	r2, #1
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	f003 0201 	and.w	r2, r3, #1
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d017      	beq.n	80015da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d123      	bne.n	800162e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	6939      	ldr	r1, [r7, #16]
 800162a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0203 	and.w	r2, r3, #3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 808c 	beq.w	8001788 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001670:	4a4e      	ldr	r2, [pc, #312]	; (80017ac <HAL_GPIO_Init+0x2b0>)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	2207      	movs	r2, #7
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800169a:	d00d      	beq.n	80016b8 <HAL_GPIO_Init+0x1bc>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a44      	ldr	r2, [pc, #272]	; (80017b0 <HAL_GPIO_Init+0x2b4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d007      	beq.n	80016b4 <HAL_GPIO_Init+0x1b8>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a43      	ldr	r2, [pc, #268]	; (80017b4 <HAL_GPIO_Init+0x2b8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_GPIO_Init+0x1b4>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e004      	b.n	80016ba <HAL_GPIO_Init+0x1be>
 80016b0:	2307      	movs	r3, #7
 80016b2:	e002      	b.n	80016ba <HAL_GPIO_Init+0x1be>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_GPIO_Init+0x1be>
 80016b8:	2300      	movs	r3, #0
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	f002 0203 	and.w	r2, r2, #3
 80016c0:	0092      	lsls	r2, r2, #2
 80016c2:	4093      	lsls	r3, r2
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016ca:	4938      	ldr	r1, [pc, #224]	; (80017ac <HAL_GPIO_Init+0x2b0>)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016d8:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <HAL_GPIO_Init+0x2bc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016fc:	4a2e      	ldr	r2, [pc, #184]	; (80017b8 <HAL_GPIO_Init+0x2bc>)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_GPIO_Init+0x2bc>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001726:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <HAL_GPIO_Init+0x2bc>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800172c:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <HAL_GPIO_Init+0x2bc>)
 800172e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001732:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001752:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <HAL_GPIO_Init+0x2bc>)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_GPIO_Init+0x2bc>)
 800175c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001760:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <HAL_GPIO_Init+0x2bc>)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	f47f aeb7 	bne.w	800150c <HAL_GPIO_Init+0x10>
  }
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40010000 	.word	0x40010000
 80017b0:	48000400 	.word	0x48000400
 80017b4:	48000800 	.word	0x48000800
 80017b8:	58000800 	.word	0x58000800

080017bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80017c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	58000400 	.word	0x58000400

080017d8 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <LL_PWR_EnableBootC2+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4a03      	ldr	r2, [pc, #12]	; (80017f0 <LL_PWR_EnableBootC2+0x18>)
 80017e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	58000400 	.word	0x58000400

080017f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_PWREx_GetVoltageRange+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	58000400 	.word	0x58000400

0800180c <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001814:	f7ff ffe0 	bl	80017d8 <LL_PWR_EnableBootC2>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001830:	d101      	bne.n	8001836 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	58000400 	.word	0x58000400

08001844 <LL_RCC_HSE_EnableTcxo>:
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001852:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <LL_RCC_HSE_DisableTcxo>:
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800186e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001872:	6013      	str	r3, [r2, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800188e:	d101      	bne.n	8001894 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <LL_RCC_HSE_Enable>:
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <LL_RCC_HSE_Disable>:
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018cc:	6013      	str	r3, [r2, #0]
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <LL_RCC_HSE_IsReady>:
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80018da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018e8:	d101      	bne.n	80018ee <LL_RCC_HSE_IsReady+0x18>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <LL_RCC_HSE_IsReady+0x1a>
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <LL_RCC_HSI_Enable>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <LL_RCC_HSI_Disable>:
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <LL_RCC_HSI_IsReady>:
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800193e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001942:	d101      	bne.n	8001948 <LL_RCC_HSI_IsReady+0x18>
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <LL_RCC_HSI_IsReady+0x1a>
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	061b      	lsls	r3, r3, #24
 8001968:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b02      	cmp	r3, #2
 800198c:	d101      	bne.n	8001992 <LL_RCC_LSE_IsReady+0x18>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_RCC_LSE_IsReady+0x1a>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80019a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80019e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d101      	bne.n	80019f4 <LL_RCC_LSI_IsReady+0x18>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <LL_RCC_LSI_IsReady+0x1a>
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6013      	str	r3, [r2, #0]
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	6013      	str	r3, [r2, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d101      	bne.n	8001a4c <LL_RCC_MSI_IsReady+0x16>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <LL_RCC_MSI_IsReady+0x18>
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d101      	bne.n	8001a6c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 0203 	bic.w	r2, r3, #3
 8001ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b68:	f023 020f 	bic.w	r2, r3, #15
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b74:	4313      	orrs	r3, r2
 8001b76:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c76:	d101      	bne.n	8001c7c <LL_RCC_PLL_IsReady+0x18>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <LL_RCC_PLL_IsReady+0x1a>
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf2:	d101      	bne.n	8001cf8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d16:	d101      	bne.n	8001d1c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3a:	d101      	bne.n	8001d40 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d5c:	d101      	bne.n	8001d62 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d7e:	d101      	bne.n	8001d84 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e38b      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da2:	f7ff fea6 	bl	8001af2 <LL_RCC_GetSysClkSource>
 8001da6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da8:	f7ff ff8f 	bl	8001cca <LL_RCC_PLL_GetMainSource>
 8001dac:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80c9 	beq.w	8001f4e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_RCC_OscConfig+0x3e>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d17b      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d178      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dce:	f7ff fe32 	bl	8001a36 <LL_RCC_MSI_IsReady>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_OscConfig+0x54>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e36a      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x72>
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e00:	e006      	b.n	8001e10 <HAL_RCC_OscConfig+0x80>
 8001e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d222      	bcs.n	8001e5a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fd6f 	bl	80028fc <RCC_SetFlashLatencyFromMSIRange>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e348      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e32:	f043 0308 	orr.w	r3, r3, #8
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fe26 	bl	8001aa4 <LL_RCC_MSI_SetCalibTrimming>
 8001e58:	e021      	b.n	8001e9e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fe0d 	bl	8001aa4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 fd34 	bl	80028fc <RCC_SetFlashLatencyFromMSIRange>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e30d      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001e9e:	f000 fcf5 	bl	800288c <HAL_RCC_GetHCLKFreq>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	4aa1      	ldr	r2, [pc, #644]	; (800212c <HAL_RCC_OscConfig+0x39c>)
 8001ea6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ea8:	4ba1      	ldr	r3, [pc, #644]	; (8002130 <HAL_RCC_OscConfig+0x3a0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fe41 	bl	8000b34 <HAL_InitTick>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d047      	beq.n	8001f4c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8001ebc:	7cfb      	ldrb	r3, [r7, #19]
 8001ebe:	e2fc      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d02c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ec8:	f7ff fd99 	bl	80019fe <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ecc:	f7fe fe7e 	bl	8000bcc <HAL_GetTick>
 8001ed0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ed4:	f7fe fe7a 	bl	8000bcc <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e2e9      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ee6:	f7ff fda6 	bl	8001a36 <LL_RCC_MSI_IsReady>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f1      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fdc2 	bl	8001aa4 <LL_RCC_MSI_SetCalibTrimming>
 8001f20:	e015      	b.n	8001f4e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f22:	f7ff fd7a 	bl	8001a1a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f26:	f7fe fe51 	bl	8000bcc <HAL_GetTick>
 8001f2a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f2e:	f7fe fe4d 	bl	8000bcc <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e2bc      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f40:	f7ff fd79 	bl	8001a36 <LL_RCC_MSI_IsReady>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f1      	bne.n	8001f2e <HAL_RCC_OscConfig+0x19e>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f4c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d05f      	beq.n	800201a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_OscConfig+0x1dc>
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	d10d      	bne.n	8001f82 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d10a      	bne.n	8001f82 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	f7ff fcb3 	bl	80018d6 <LL_RCC_HSE_IsReady>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d050      	beq.n	8002018 <HAL_RCC_OscConfig+0x288>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d14c      	bne.n	8002018 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e29b      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa0:	d102      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x218>
 8001fa2:	f7ff fc7c 	bl	800189e <LL_RCC_HSE_Enable>
 8001fa6:	e00d      	b.n	8001fc4 <HAL_RCC_OscConfig+0x234>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001fb0:	d104      	bne.n	8001fbc <HAL_RCC_OscConfig+0x22c>
 8001fb2:	f7ff fc47 	bl	8001844 <LL_RCC_HSE_EnableTcxo>
 8001fb6:	f7ff fc72 	bl	800189e <LL_RCC_HSE_Enable>
 8001fba:	e003      	b.n	8001fc4 <HAL_RCC_OscConfig+0x234>
 8001fbc:	f7ff fc7d 	bl	80018ba <LL_RCC_HSE_Disable>
 8001fc0:	f7ff fc4e 	bl	8001860 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d012      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7fe fdfe 	bl	8000bcc <HAL_GetTick>
 8001fd0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7fe fdfa 	bl	8000bcc <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e269      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001fe6:	f7ff fc76 	bl	80018d6 <LL_RCC_HSE_IsReady>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f1      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x244>
 8001ff0:	e013      	b.n	800201a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fdeb 	bl	8000bcc <HAL_GetTick>
 8001ff6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffa:	f7fe fde7 	bl	8000bcc <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b64      	cmp	r3, #100	; 0x64
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e256      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800200c:	f7ff fc63 	bl	80018d6 <LL_RCC_HSE_IsReady>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f1      	bne.n	8001ffa <HAL_RCC_OscConfig+0x26a>
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d04b      	beq.n	80020be <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	2b04      	cmp	r3, #4
 800202a:	d005      	beq.n	8002038 <HAL_RCC_OscConfig+0x2a8>
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	2b0c      	cmp	r3, #12
 8002030:	d113      	bne.n	800205a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d110      	bne.n	800205a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002038:	f7ff fc7a 	bl	8001930 <LL_RCC_HSI_IsReady>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_RCC_OscConfig+0x2be>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e235      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fc7d 	bl	8001952 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002058:	e031      	b.n	80020be <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d019      	beq.n	8002096 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002062:	f7ff fc49 	bl	80018f8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002066:	f7fe fdb1 	bl	8000bcc <HAL_GetTick>
 800206a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206e:	f7fe fdad 	bl	8000bcc <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e21c      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002080:	f7ff fc56 	bl	8001930 <LL_RCC_HSI_IsReady>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f1      	beq.n	800206e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fc5f 	bl	8001952 <LL_RCC_HSI_SetCalibTrimming>
 8002094:	e013      	b.n	80020be <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002096:	f7ff fc3d 	bl	8001914 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209a:	f7fe fd97 	bl	8000bcc <HAL_GetTick>
 800209e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a2:	f7fe fd93 	bl	8000bcc <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e202      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80020b4:	f7ff fc3c 	bl	8001930 <LL_RCC_HSI_IsReady>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f1      	bne.n	80020a2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d06f      	beq.n	80021aa <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d057      	beq.n	8002182 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020da:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d036      	beq.n	8002158 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e1db      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d018      	beq.n	800213e <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 800210c:	f7ff fc56 	bl	80019bc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002110:	f7fe fd5c 	bl	8000bcc <HAL_GetTick>
 8002114:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002116:	e00d      	b.n	8002134 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002118:	f7fe fd58 	bl	8000bcc <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b11      	cmp	r3, #17
 8002124:	d906      	bls.n	8002134 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e1c7      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
 800212a:	bf00      	nop
 800212c:	20000000 	.word	0x20000000
 8002130:	20000024 	.word	0x20000024
          while (LL_RCC_LSI_IsReady() != 0U)
 8002134:	f7ff fc52 	bl	80019dc <LL_RCC_LSI_IsReady>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ec      	bne.n	8002118 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800213e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002146:	f023 0210 	bic.w	r2, r3, #16
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002158:	f7ff fc20 	bl	800199c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215c:	f7fe fd36 	bl	8000bcc <HAL_GetTick>
 8002160:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002164:	f7fe fd32 	bl	8000bcc <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b11      	cmp	r3, #17
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e1a1      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002176:	f7ff fc31 	bl	80019dc <LL_RCC_LSI_IsReady>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f1      	beq.n	8002164 <HAL_RCC_OscConfig+0x3d4>
 8002180:	e013      	b.n	80021aa <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002182:	f7ff fc1b 	bl	80019bc <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7fe fd21 	bl	8000bcc <HAL_GetTick>
 800218a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218e:	f7fe fd1d 	bl	8000bcc <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b11      	cmp	r3, #17
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e18c      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80021a0:	f7ff fc1c 	bl	80019dc <LL_RCC_LSI_IsReady>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f1      	bne.n	800218e <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80d8 	beq.w	8002368 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80021b8:	f7ff fb32 	bl	8001820 <LL_PWR_IsEnabledBkUpAccess>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d113      	bne.n	80021ea <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80021c2:	f7ff fafb 	bl	80017bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c6:	f7fe fd01 	bl	8000bcc <HAL_GetTick>
 80021ca:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ce:	f7fe fcfd 	bl	8000bcc <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e16c      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80021e0:	f7ff fb1e 	bl	8001820 <LL_PWR_IsEnabledBkUpAccess>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f1      	beq.n	80021ce <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d07b      	beq.n	80022ea <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b85      	cmp	r3, #133	; 0x85
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d109      	bne.n	8002216 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002216:	f7fe fcd9 	bl	8000bcc <HAL_GetTick>
 800221a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800221c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7fe fccb 	bl	8000bcc <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e138      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002248:	f7ff fb97 	bl	800197a <LL_RCC_LSE_IsReady>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0ef      	beq.n	8002232 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b81      	cmp	r3, #129	; 0x81
 8002258:	d003      	beq.n	8002262 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b85      	cmp	r3, #133	; 0x85
 8002260:	d121      	bne.n	80022a6 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7fe fcb3 	bl	8000bcc <HAL_GetTick>
 8002266:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7fe fca5 	bl	8000bcc <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	f241 3288 	movw	r2, #5000	; 0x1388
 800228c:	4293      	cmp	r3, r2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e112      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0ec      	beq.n	800227e <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80022a4:	e060      	b.n	8002368 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7fe fc91 	bl	8000bcc <HAL_GetTick>
 80022aa:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f7fe fc83 	bl	8000bcc <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e0f0      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1ec      	bne.n	80022c2 <HAL_RCC_OscConfig+0x532>
 80022e8:	e03e      	b.n	8002368 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7fe fc6f 	bl	8000bcc <HAL_GetTick>
 80022ee:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80022f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fc61 	bl	8000bcc <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e0ce      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800231c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ec      	bne.n	8002306 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7fe fc4e 	bl	8000bcc <HAL_GetTick>
 8002330:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002346:	e00a      	b.n	800235e <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7fe fc40 	bl	8000bcc <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0ad      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800235e:	f7ff fb0c 	bl	800197a <LL_RCC_LSE_IsReady>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ef      	bne.n	8002348 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80a3 	beq.w	80024b8 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d076      	beq.n	8002466 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	2b02      	cmp	r3, #2
 800237e:	d14b      	bne.n	8002418 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002380:	f7ff fc62 	bl	8001c48 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe fc22 	bl	8000bcc <HAL_GetTick>
 8002388:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe fc1e 	bl	8000bcc <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b0a      	cmp	r3, #10
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e08d      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800239e:	f7ff fc61 	bl	8001c64 <LL_RCC_PLL_IsReady>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f1      	bne.n	800238c <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	4b45      	ldr	r3, [pc, #276]	; (80024c4 <HAL_RCC_OscConfig+0x734>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023ba:	4311      	orrs	r1, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023c0:	0212      	lsls	r2, r2, #8
 80023c2:	4311      	orrs	r1, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023c8:	4311      	orrs	r1, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023ce:	4311      	orrs	r1, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023d4:	430a      	orrs	r2, r1
 80023d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023da:	4313      	orrs	r3, r2
 80023dc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023de:	f7ff fc25 	bl	8001c2c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7fe fbeb 	bl	8000bcc <HAL_GetTick>
 80023f6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe fbe7 	bl	8000bcc <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b0a      	cmp	r3, #10
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e056      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 800240c:	f7ff fc2a 	bl	8001c64 <LL_RCC_PLL_IsReady>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f1      	beq.n	80023fa <HAL_RCC_OscConfig+0x66a>
 8002416:	e04f      	b.n	80024b8 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002418:	f7ff fc16 	bl	8001c48 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002426:	f023 0303 	bic.w	r3, r3, #3
 800242a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800242c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002436:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800243a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243e:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe fbc4 	bl	8000bcc <HAL_GetTick>
 8002444:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fbc0 	bl	8000bcc <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b0a      	cmp	r3, #10
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e02f      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800245a:	f7ff fc03 	bl	8001c64 <LL_RCC_PLL_IsReady>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f1      	bne.n	8002448 <HAL_RCC_OscConfig+0x6b8>
 8002464:	e028      	b.n	80024b8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e023      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f003 0203 	and.w	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	429a      	cmp	r2, r3
 8002486:	d115      	bne.n	80024b4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002492:	429a      	cmp	r2, r3
 8002494:	d10e      	bne.n	80024b4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d106      	bne.n	80024b4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	11c1808c 	.word	0x11c1808c

080024c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e12c      	b.n	8002736 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b98      	ldr	r3, [pc, #608]	; (8002740 <HAL_RCC_ClockConfig+0x278>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d91b      	bls.n	8002522 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b95      	ldr	r3, [pc, #596]	; (8002740 <HAL_RCC_ClockConfig+0x278>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 0207 	bic.w	r2, r3, #7
 80024f2:	4993      	ldr	r1, [pc, #588]	; (8002740 <HAL_RCC_ClockConfig+0x278>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024fa:	f7fe fb67 	bl	8000bcc <HAL_GetTick>
 80024fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002500:	e008      	b.n	8002514 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002502:	f7fe fb63 	bl	8000bcc <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e110      	b.n	8002736 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002514:	4b8a      	ldr	r3, [pc, #552]	; (8002740 <HAL_RCC_ClockConfig+0x278>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d1ef      	bne.n	8002502 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d016      	beq.n	800255c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fae8 	bl	8001b08 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002538:	f7fe fb48 	bl	8000bcc <HAL_GetTick>
 800253c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002540:	f7fe fb44 	bl	8000bcc <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e0f1      	b.n	8002736 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002552:	f7ff fbc5 	bl	8001ce0 <LL_RCC_IsActiveFlag_HPRE>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f1      	beq.n	8002540 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d016      	beq.n	8002596 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fade 	bl	8001b2e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002572:	f7fe fb2b 	bl	8000bcc <HAL_GetTick>
 8002576:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800257a:	f7fe fb27 	bl	8000bcc <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0d4      	b.n	8002736 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800258c:	f7ff fbb9 	bl	8001d02 <LL_RCC_IsActiveFlag_C2HPRE>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f1      	beq.n	800257a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d016      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fad6 	bl	8001b58 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025ac:	f7fe fb0e 	bl	8000bcc <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025b4:	f7fe fb0a 	bl	8000bcc <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e0b7      	b.n	8002736 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025c6:	f7ff fbae 	bl	8001d26 <LL_RCC_IsActiveFlag_SHDHPRE>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f1      	beq.n	80025b4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d016      	beq.n	800260a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff facf 	bl	8001b84 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025e6:	f7fe faf1 	bl	8000bcc <HAL_GetTick>
 80025ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025ee:	f7fe faed 	bl	8000bcc <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e09a      	b.n	8002736 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002600:	f7ff fba3 	bl	8001d4a <LL_RCC_IsActiveFlag_PPRE1>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f1      	beq.n	80025ee <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d017      	beq.n	8002646 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fac4 	bl	8001baa <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002622:	f7fe fad3 	bl	8000bcc <HAL_GetTick>
 8002626:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800262a:	f7fe facf 	bl	8000bcc <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e07c      	b.n	8002736 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800263c:	f7ff fb96 	bl	8001d6c <LL_RCC_IsActiveFlag_PPRE2>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f1      	beq.n	800262a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d043      	beq.n	80026da <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d106      	bne.n	8002668 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800265a:	f7ff f93c 	bl	80018d6 <LL_RCC_HSE_IsReady>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d11e      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e066      	b.n	8002736 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d106      	bne.n	800267e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002670:	f7ff faf8 	bl	8001c64 <LL_RCC_PLL_IsReady>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d113      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e05b      	b.n	8002736 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002686:	f7ff f9d6 	bl	8001a36 <LL_RCC_MSI_IsReady>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d108      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e050      	b.n	8002736 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002694:	f7ff f94c 	bl	8001930 <LL_RCC_HSI_IsReady>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e049      	b.n	8002736 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fa10 	bl	8001acc <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ac:	f7fe fa8e 	bl	8000bcc <HAL_GetTick>
 80026b0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b4:	f7fe fa8a 	bl	8000bcc <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e035      	b.n	8002736 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	f7ff fa12 	bl	8001af2 <LL_RCC_GetSysClkSource>
 80026ce:	4602      	mov	r2, r0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d1ec      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_RCC_ClockConfig+0x278>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d21b      	bcs.n	8002720 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e8:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_RCC_ClockConfig+0x278>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 0207 	bic.w	r2, r3, #7
 80026f0:	4913      	ldr	r1, [pc, #76]	; (8002740 <HAL_RCC_ClockConfig+0x278>)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f8:	f7fe fa68 	bl	8000bcc <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002700:	f7fe fa64 	bl	8000bcc <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e011      	b.n	8002736 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_ClockConfig+0x278>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d1ef      	bne.n	8002700 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002720:	f000 f8b4 	bl	800288c <HAL_RCC_GetHCLKFreq>
 8002724:	4603      	mov	r3, r0
 8002726:	4a07      	ldr	r2, [pc, #28]	; (8002744 <HAL_RCC_ClockConfig+0x27c>)
 8002728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800272a:	4b07      	ldr	r3, [pc, #28]	; (8002748 <HAL_RCC_ClockConfig+0x280>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fa00 	bl	8000b34 <HAL_InitTick>
 8002734:	4603      	mov	r3, r0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	58004000 	.word	0x58004000
 8002744:	20000000 	.word	0x20000000
 8002748:	20000024 	.word	0x20000024

0800274c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800275a:	f7ff f9ca 	bl	8001af2 <LL_RCC_GetSysClkSource>
 800275e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002760:	f7ff fab3 	bl	8001cca <LL_RCC_PLL_GetMainSource>
 8002764:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0x2c>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d139      	bne.n	80027e6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d136      	bne.n	80027e6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002778:	f7ff f96d 	bl	8001a56 <LL_RCC_MSI_IsEnabledRangeSelect>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d115      	bne.n	80027ae <HAL_RCC_GetSysClockFreq+0x62>
 8002782:	f7ff f968 	bl	8001a56 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002786:	4603      	mov	r3, r0
 8002788:	2b01      	cmp	r3, #1
 800278a:	d106      	bne.n	800279a <HAL_RCC_GetSysClockFreq+0x4e>
 800278c:	f7ff f973 	bl	8001a76 <LL_RCC_MSI_GetRange>
 8002790:	4603      	mov	r3, r0
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	e005      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0x5a>
 800279a:	f7ff f977 	bl	8001a8c <LL_RCC_MSI_GetRangeAfterStandby>
 800279e:	4603      	mov	r3, r0
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	4a36      	ldr	r2, [pc, #216]	; (8002880 <HAL_RCC_GetSysClockFreq+0x134>)
 80027a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ac:	e014      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x8c>
 80027ae:	f7ff f952 	bl	8001a56 <LL_RCC_MSI_IsEnabledRangeSelect>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_GetSysClockFreq+0x7a>
 80027b8:	f7ff f95d 	bl	8001a76 <LL_RCC_MSI_GetRange>
 80027bc:	4603      	mov	r3, r0
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	e005      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0x86>
 80027c6:	f7ff f961 	bl	8001a8c <LL_RCC_MSI_GetRangeAfterStandby>
 80027ca:	4603      	mov	r3, r0
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	4a2b      	ldr	r2, [pc, #172]	; (8002880 <HAL_RCC_GetSysClockFreq+0x134>)
 80027d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d115      	bne.n	800280c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027e4:	e012      	b.n	800280c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <HAL_RCC_GetSysClockFreq+0x138>)
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	e00c      	b.n	800280c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d109      	bne.n	800280c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80027f8:	f7ff f840 	bl	800187c <LL_RCC_HSE_IsEnabledDiv2>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d102      	bne.n	8002808 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCC_GetSysClockFreq+0x138>)
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	e001      	b.n	800280c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002808:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <HAL_RCC_GetSysClockFreq+0x13c>)
 800280a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280c:	f7ff f971 	bl	8001af2 <LL_RCC_GetSysClkSource>
 8002810:	4603      	mov	r3, r0
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d12f      	bne.n	8002876 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002816:	f7ff fa58 	bl	8001cca <LL_RCC_PLL_GetMainSource>
 800281a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d003      	beq.n	800282a <HAL_RCC_GetSysClockFreq+0xde>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d003      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0xe4>
 8002828:	e00d      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800282a:	4b16      	ldr	r3, [pc, #88]	; (8002884 <HAL_RCC_GetSysClockFreq+0x138>)
 800282c:	60fb      	str	r3, [r7, #12]
        break;
 800282e:	e00d      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002830:	f7ff f824 	bl	800187c <LL_RCC_HSE_IsEnabledDiv2>
 8002834:	4603      	mov	r3, r0
 8002836:	2b01      	cmp	r3, #1
 8002838:	d102      	bne.n	8002840 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_GetSysClockFreq+0x138>)
 800283c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800283e:	e005      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002842:	60fb      	str	r3, [r7, #12]
        break;
 8002844:	e002      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	60fb      	str	r3, [r7, #12]
        break;
 800284a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800284c:	f7ff fa1b 	bl	8001c86 <LL_RCC_PLL_GetN>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	fb03 f402 	mul.w	r4, r3, r2
 8002858:	f7ff fa2c 	bl	8001cb4 <LL_RCC_PLL_GetDivider>
 800285c:	4603      	mov	r3, r0
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	3301      	adds	r3, #1
 8002862:	fbb4 f4f3 	udiv	r4, r4, r3
 8002866:	f7ff fa1a 	bl	8001c9e <LL_RCC_PLL_GetR>
 800286a:	4603      	mov	r3, r0
 800286c:	0f5b      	lsrs	r3, r3, #29
 800286e:	3301      	adds	r3, #1
 8002870:	fbb4 f3f3 	udiv	r3, r4, r3
 8002874:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002876:	697b      	ldr	r3, [r7, #20]
}
 8002878:	4618      	mov	r0, r3
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	bd90      	pop	{r4, r7, pc}
 8002880:	08004828 	.word	0x08004828
 8002884:	00f42400 	.word	0x00f42400
 8002888:	01e84800 	.word	0x01e84800

0800288c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800288c:	b598      	push	{r3, r4, r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002890:	f7ff ff5c 	bl	800274c <HAL_RCC_GetSysClockFreq>
 8002894:	4604      	mov	r4, r0
 8002896:	f7ff f99b 	bl	8001bd0 <LL_RCC_GetAHBPrescaler>
 800289a:	4603      	mov	r3, r0
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	4a03      	ldr	r2, [pc, #12]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x24>)
 80028a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd98      	pop	{r3, r4, r7, pc}
 80028b0:	080047c8 	.word	0x080047c8

080028b4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b4:	b598      	push	{r3, r4, r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80028b8:	f7ff ffe8 	bl	800288c <HAL_RCC_GetHCLKFreq>
 80028bc:	4604      	mov	r4, r0
 80028be:	f7ff f99f 	bl	8001c00 <LL_RCC_GetAPB1Prescaler>
 80028c2:	4603      	mov	r3, r0
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	4a03      	ldr	r2, [pc, #12]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd98      	pop	{r3, r4, r7, pc}
 80028d4:	08004808 	.word	0x08004808

080028d8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d8:	b598      	push	{r3, r4, r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80028dc:	f7ff ffd6 	bl	800288c <HAL_RCC_GetHCLKFreq>
 80028e0:	4604      	mov	r4, r0
 80028e2:	f7ff f998 	bl	8001c16 <LL_RCC_GetAPB2Prescaler>
 80028e6:	4603      	mov	r3, r0
 80028e8:	0adb      	lsrs	r3, r3, #11
 80028ea:	4a03      	ldr	r2, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd98      	pop	{r3, r4, r7, pc}
 80028f8:	08004808 	.word	0x08004808

080028fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	4a10      	ldr	r2, [pc, #64]	; (8002950 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800290e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002912:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002914:	f7ff f967 	bl	8001be6 <LL_RCC_GetAHB3Prescaler>
 8002918:	4603      	mov	r3, r0
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	4a09      	ldr	r2, [pc, #36]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0c9c      	lsrs	r4, r3, #18
 8002938:	f7fe ff5c 	bl	80017f4 <HAL_PWREx_GetVoltageRange>
 800293c:	4603      	mov	r3, r0
 800293e:	4619      	mov	r1, r3
 8002940:	4620      	mov	r0, r4
 8002942:	f000 f80b 	bl	800295c <RCC_SetFlashLatency>
 8002946:	4603      	mov	r3, r0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bd90      	pop	{r4, r7, pc}
 8002950:	08004828 	.word	0x08004828
 8002954:	080047c8 	.word	0x080047c8
 8002958:	431bde83 	.word	0x431bde83

0800295c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08e      	sub	sp, #56	; 0x38
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002966:	4a3a      	ldr	r2, [pc, #232]	; (8002a50 <RCC_SetFlashLatency+0xf4>)
 8002968:	f107 0320 	add.w	r3, r7, #32
 800296c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002970:	6018      	str	r0, [r3, #0]
 8002972:	3304      	adds	r3, #4
 8002974:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002976:	4a37      	ldr	r2, [pc, #220]	; (8002a54 <RCC_SetFlashLatency+0xf8>)
 8002978:	f107 0318 	add.w	r3, r7, #24
 800297c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002980:	6018      	str	r0, [r3, #0]
 8002982:	3304      	adds	r3, #4
 8002984:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002986:	4a34      	ldr	r2, [pc, #208]	; (8002a58 <RCC_SetFlashLatency+0xfc>)
 8002988:	f107 030c 	add.w	r3, r7, #12
 800298c:	ca07      	ldmia	r2, {r0, r1, r2}
 800298e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002992:	2300      	movs	r3, #0
 8002994:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800299c:	d11b      	bne.n	80029d6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800299e:	2300      	movs	r3, #0
 80029a0:	633b      	str	r3, [r7, #48]	; 0x30
 80029a2:	e014      	b.n	80029ce <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	3338      	adds	r3, #56	; 0x38
 80029aa:	443b      	add	r3, r7
 80029ac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80029b0:	461a      	mov	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d807      	bhi.n	80029c8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	3338      	adds	r3, #56	; 0x38
 80029be:	443b      	add	r3, r7
 80029c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80029c6:	e021      	b.n	8002a0c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ca:	3301      	adds	r3, #1
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d9e7      	bls.n	80029a4 <RCC_SetFlashLatency+0x48>
 80029d4:	e01a      	b.n	8002a0c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029da:	e014      	b.n	8002a06 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	3338      	adds	r3, #56	; 0x38
 80029e2:	443b      	add	r3, r7
 80029e4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80029e8:	461a      	mov	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d807      	bhi.n	8002a00 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	3338      	adds	r3, #56	; 0x38
 80029f6:	443b      	add	r3, r7
 80029f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80029fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80029fe:	e005      	b.n	8002a0c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	3301      	adds	r3, #1
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d9e7      	bls.n	80029dc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <RCC_SetFlashLatency+0x100>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 0207 	bic.w	r2, r3, #7
 8002a14:	4911      	ldr	r1, [pc, #68]	; (8002a5c <RCC_SetFlashLatency+0x100>)
 8002a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a1c:	f7fe f8d6 	bl	8000bcc <HAL_GetTick>
 8002a20:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a22:	e008      	b.n	8002a36 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a24:	f7fe f8d2 	bl	8000bcc <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e007      	b.n	8002a46 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <RCC_SetFlashLatency+0x100>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d1ef      	bne.n	8002a24 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3738      	adds	r7, #56	; 0x38
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	080047ac 	.word	0x080047ac
 8002a54:	080047b4 	.word	0x080047b4
 8002a58:	080047bc 	.word	0x080047bc
 8002a5c:	58004000 	.word	0x58004000

08002a60 <LL_RCC_LSE_IsReady>:
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d101      	bne.n	8002a78 <LL_RCC_LSE_IsReady+0x18>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <LL_RCC_LSE_IsReady+0x1a>
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <LL_RCC_SetUSARTClockSource>:
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	0c1b      	lsrs	r3, r3, #16
 8002a96:	43db      	mvns	r3, r3
 8002a98:	401a      	ands	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <LL_RCC_SetI2SClockSource>:
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <LL_RCC_SetLPUARTClockSource>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002af0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <LL_RCC_SetI2CClockSource>:
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	401a      	ands	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <LL_RCC_SetLPTIMClockSource>:
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	43db      	mvns	r3, r3
 8002b56:	401a      	ands	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	041b      	lsls	r3, r3, #16
 8002b5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <LL_RCC_SetRNGClockSource>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b80:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <LL_RCC_SetADCClockSource>:
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <LL_RCC_SetRTCClockSource>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr

08002bee <LL_RCC_GetRTCClockSource>:
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <LL_RCC_ForceBackupDomainReset>:
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c1e:	bf00      	nop
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
	...

08002c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002c54:	2300      	movs	r3, #0
 8002c56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002c58:	2300      	movs	r3, #0
 8002c5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d058      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002c68:	f7fe fda8 	bl	80017bc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c6c:	f7fd ffae 	bl	8000bcc <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002c72:	e009      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c74:	f7fd ffaa 	bl	8000bcc <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d902      	bls.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	74fb      	strb	r3, [r7, #19]
        break;
 8002c86:	e006      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002c88:	4b7b      	ldr	r3, [pc, #492]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c94:	d1ee      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002c96:	7cfb      	ldrb	r3, [r7, #19]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d13c      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002c9c:	f7ff ffa7 	bl	8002bee <LL_RCC_GetRTCClockSource>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d00f      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cb8:	f7ff ffa5 	bl	8002c06 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cbc:	f7ff ffb3 	bl	8002c26 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d014      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fd ff7a 	bl	8000bcc <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fd ff76 	bl	8000bcc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d902      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	74fb      	strb	r3, [r7, #19]
            break;
 8002cf2:	e004      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002cf4:	f7ff feb4 	bl	8002a60 <LL_RCC_LSE_IsReady>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d1ee      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002cfe:	7cfb      	ldrb	r3, [r7, #19]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff5b 	bl	8002bc4 <LL_RCC_SetRTCClockSource>
 8002d0e:	e004      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	74bb      	strb	r3, [r7, #18]
 8002d14:	e001      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d16:	7cfb      	ldrb	r3, [r7, #19]
 8002d18:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fea9 	bl	8002a82 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d004      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fe9e 	bl	8002a82 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fec0 	bl	8002adc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fee6 	bl	8002b3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fedb 	bl	8002b3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fed0 	bl	8002b3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fea9 	bl	8002b06 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fe9e 	bl	8002b06 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d004      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fe93 	bl	8002b06 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d011      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fe5e 	bl	8002ab2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d010      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fea5 	bl	8002b70 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d011      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fea3 	bl	8002b9a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002e6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	58000400 	.word	0x58000400

08002e7c <LL_RCC_GetUSARTClockSource>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	401a      	ands	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	041b      	lsls	r3, r3, #16
 8002e94:	4313      	orrs	r3, r2
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <LL_RCC_GetLPUARTClockSource>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4013      	ands	r3, r2
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e042      	b.n	8002f56 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fcec 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fbff 	bl	8003704 <UART_SetConfig>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e022      	b.n	8002f56 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fe67 	bl	8003bec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 feed 	bl	8003d2e <UART_CheckIdleState>
 8002f54:	4603      	mov	r3, r0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b08a      	sub	sp, #40	; 0x28
 8002f62:	af02      	add	r7, sp, #8
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	f040 8083 	bne.w	8003080 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_UART_Transmit+0x28>
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e07b      	b.n	8003082 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_UART_Transmit+0x3a>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e074      	b.n	8003082 <HAL_UART_Transmit+0x124>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2221      	movs	r2, #33	; 0x21
 8002fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fb0:	f7fd fe0c 	bl	8000bcc <HAL_GetTick>
 8002fb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	88fa      	ldrh	r2, [r7, #6]
 8002fba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	88fa      	ldrh	r2, [r7, #6]
 8002fc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fce:	d108      	bne.n	8002fe2 <HAL_UART_Transmit+0x84>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d104      	bne.n	8002fe2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	e003      	b.n	8002fea <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002ff2:	e02c      	b.n	800304e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2180      	movs	r1, #128	; 0x80
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fee0 	bl	8003dc4 <UART_WaitOnFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e039      	b.n	8003082 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10b      	bne.n	800302c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003022:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	3302      	adds	r3, #2
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	e007      	b.n	800303c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3301      	adds	r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1cc      	bne.n	8002ff4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	2140      	movs	r1, #64	; 0x40
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fead 	bl	8003dc4 <UART_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e006      	b.n	8003082 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3720      	adds	r7, #32
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b0ba      	sub	sp, #232	; 0xe8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80030b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80030ba:	4013      	ands	r3, r2
 80030bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80030c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d11b      	bne.n	8003100 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80030c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d015      	beq.n	8003100 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80030d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80030e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d009      	beq.n	8003100 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 82d6 	beq.w	80036a2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
      }
      return;
 80030fe:	e2d0      	b.n	80036a2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003100:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 811f 	beq.w	8003348 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800310a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800310e:	4b8b      	ldr	r3, [pc, #556]	; (800333c <HAL_UART_IRQHandler+0x2b0>)
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003116:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800311a:	4b89      	ldr	r3, [pc, #548]	; (8003340 <HAL_UART_IRQHandler+0x2b4>)
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8112 	beq.w	8003348 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d011      	beq.n	8003154 <HAL_UART_IRQHandler+0xc8>
 8003130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00b      	beq.n	8003154 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2201      	movs	r2, #1
 8003142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d011      	beq.n	8003184 <HAL_UART_IRQHandler+0xf8>
 8003160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2202      	movs	r2, #2
 8003172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800317a:	f043 0204 	orr.w	r2, r3, #4
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d011      	beq.n	80031b4 <HAL_UART_IRQHandler+0x128>
 8003190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00b      	beq.n	80031b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2204      	movs	r2, #4
 80031a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031aa:	f043 0202 	orr.w	r2, r3, #2
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d017      	beq.n	80031f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80031c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d105      	bne.n	80031d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80031cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80031d0:	4b5a      	ldr	r3, [pc, #360]	; (800333c <HAL_UART_IRQHandler+0x2b0>)
 80031d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00b      	beq.n	80031f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2208      	movs	r2, #8
 80031de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e6:	f043 0208 	orr.w	r2, r3, #8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d012      	beq.n	8003222 <HAL_UART_IRQHandler+0x196>
 80031fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003200:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00c      	beq.n	8003222 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003210:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 823c 	beq.w	80036a6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800322e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	d013      	beq.n	8003262 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800323a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d105      	bne.n	8003252 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d005      	beq.n	8003286 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800327a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800327e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003282:	2b00      	cmp	r3, #0
 8003284:	d04f      	beq.n	8003326 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 ff4c 	bl	8004124 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d141      	bne.n	800331e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3308      	adds	r3, #8
 80032a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032a8:	e853 3f00 	ldrex	r3, [r3]
 80032ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80032b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3308      	adds	r3, #8
 80032c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80032d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032d6:	e841 2300 	strex	r3, r2, [r1]
 80032da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1d9      	bne.n	800329a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d013      	beq.n	8003316 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f2:	4a14      	ldr	r2, [pc, #80]	; (8003344 <HAL_UART_IRQHandler+0x2b8>)
 80032f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd ff00 	bl	8001100 <HAL_DMA_Abort_IT>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d017      	beq.n	8003336 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003310:	4610      	mov	r0, r2
 8003312:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003314:	e00f      	b.n	8003336 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f9eb 	bl	80036f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	e00b      	b.n	8003336 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f9e7 	bl	80036f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003324:	e007      	b.n	8003336 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f9e3 	bl	80036f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003334:	e1b7      	b.n	80036a6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003336:	bf00      	nop
    return;
 8003338:	e1b5      	b.n	80036a6 <HAL_UART_IRQHandler+0x61a>
 800333a:	bf00      	nop
 800333c:	10000001 	.word	0x10000001
 8003340:	04000120 	.word	0x04000120
 8003344:	080043cd 	.word	0x080043cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800334c:	2b01      	cmp	r3, #1
 800334e:	f040 814a 	bne.w	80035e6 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8143 	beq.w	80035e6 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 813c 	beq.w	80035e6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2210      	movs	r2, #16
 8003374:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	f040 80b5 	bne.w	80034f0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8003392:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8187 	beq.w	80036aa <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80033a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033a6:	429a      	cmp	r2, r3
 80033a8:	f080 817f 	bcs.w	80036aa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f040 8086 	bne.w	80034d4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800340a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1da      	bne.n	80033c8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3308      	adds	r3, #8
 8003418:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3308      	adds	r3, #8
 8003432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003436:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800343a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800343e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1e1      	bne.n	8003412 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3308      	adds	r3, #8
 8003454:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800345e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3308      	adds	r3, #8
 800346e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003472:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003474:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003478:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e3      	bne.n	800344e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2220      	movs	r2, #32
 800348a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034a4:	f023 0310 	bic.w	r3, r3, #16
 80034a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80034b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80034c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e4      	bne.n	8003494 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd fdb8 	bl	8001044 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	4619      	mov	r1, r3
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7fd f95f 	bl	80007ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034ee:	e0dc      	b.n	80036aa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80ce 	beq.w	80036ae <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8003512:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80c9 	beq.w	80036ae <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800352a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003530:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800353e:	647b      	str	r3, [r7, #68]	; 0x44
 8003540:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800354c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e4      	bne.n	800351c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3308      	adds	r3, #8
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	e853 3f00 	ldrex	r3, [r3]
 8003560:	623b      	str	r3, [r7, #32]
   return(result);
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3308      	adds	r3, #8
 8003576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800357a:	633a      	str	r2, [r7, #48]	; 0x30
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e1      	bne.n	8003552 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	e853 3f00 	ldrex	r3, [r3]
 80035ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0310 	bic.w	r3, r3, #16
 80035b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	69b9      	ldr	r1, [r7, #24]
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	617b      	str	r3, [r7, #20]
   return(result);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e4      	bne.n	80035a2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fd f8e4 	bl	80007ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80035e4:	e063      	b.n	80036ae <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00e      	beq.n	8003610 <HAL_UART_IRQHandler+0x584>
 80035f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003606:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 ff20 	bl	800444e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800360e:	e051      	b.n	80036b4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003618:	2b00      	cmp	r3, #0
 800361a:	d014      	beq.n	8003646 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800361c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003624:	2b00      	cmp	r3, #0
 8003626:	d105      	bne.n	8003634 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800362c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003638:	2b00      	cmp	r3, #0
 800363a:	d03a      	beq.n	80036b2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
    }
    return;
 8003644:	e035      	b.n	80036b2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_UART_IRQHandler+0x5da>
 8003652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 feca 	bl	80043f8 <UART_EndTransmit_IT>
    return;
 8003664:	e026      	b.n	80036b4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HAL_UART_IRQHandler+0x5fa>
 8003672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003676:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fef7 	bl	8004472 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003684:	e016      	b.n	80036b4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d010      	beq.n	80036b4 <HAL_UART_IRQHandler+0x628>
 8003692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003696:	2b00      	cmp	r3, #0
 8003698:	da0c      	bge.n	80036b4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fee0 	bl	8004460 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036a0:	e008      	b.n	80036b4 <HAL_UART_IRQHandler+0x628>
      return;
 80036a2:	bf00      	nop
 80036a4:	e006      	b.n	80036b4 <HAL_UART_IRQHandler+0x628>
    return;
 80036a6:	bf00      	nop
 80036a8:	e004      	b.n	80036b4 <HAL_UART_IRQHandler+0x628>
      return;
 80036aa:	bf00      	nop
 80036ac:	e002      	b.n	80036b4 <HAL_UART_IRQHandler+0x628>
      return;
 80036ae:	bf00      	nop
 80036b0:	e000      	b.n	80036b4 <HAL_UART_IRQHandler+0x628>
    return;
 80036b2:	bf00      	nop
  }
}
 80036b4:	37e8      	adds	r7, #232	; 0xe8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop

080036bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003708:	b08c      	sub	sp, #48	; 0x30
 800370a:	af00      	add	r7, sp, #0
 800370c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	431a      	orrs	r2, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	431a      	orrs	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	4313      	orrs	r3, r2
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b94      	ldr	r3, [pc, #592]	; (8003984 <UART_SetConfig+0x280>)
 8003734:	4013      	ands	r3, r2
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800373c:	430b      	orrs	r3, r1
 800373e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a89      	ldr	r2, [pc, #548]	; (8003988 <UART_SetConfig+0x284>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d004      	beq.n	8003770 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800376c:	4313      	orrs	r3, r2
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800377a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003784:	430b      	orrs	r3, r1
 8003786:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	f023 010f 	bic.w	r1, r3, #15
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a7a      	ldr	r2, [pc, #488]	; (800398c <UART_SetConfig+0x288>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d127      	bne.n	80037f8 <UART_SetConfig+0xf4>
 80037a8:	2003      	movs	r0, #3
 80037aa:	f7ff fb67 	bl	8002e7c <LL_RCC_GetUSARTClockSource>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d81b      	bhi.n	80037f0 <UART_SetConfig+0xec>
 80037b8:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <UART_SetConfig+0xbc>)
 80037ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037be:	bf00      	nop
 80037c0:	080037d1 	.word	0x080037d1
 80037c4:	080037e1 	.word	0x080037e1
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037e9 	.word	0x080037e9
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037d6:	e080      	b.n	80038da <UART_SetConfig+0x1d6>
 80037d8:	2302      	movs	r3, #2
 80037da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037de:	e07c      	b.n	80038da <UART_SetConfig+0x1d6>
 80037e0:	2304      	movs	r3, #4
 80037e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037e6:	e078      	b.n	80038da <UART_SetConfig+0x1d6>
 80037e8:	2308      	movs	r3, #8
 80037ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ee:	e074      	b.n	80038da <UART_SetConfig+0x1d6>
 80037f0:	2310      	movs	r3, #16
 80037f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037f6:	e070      	b.n	80038da <UART_SetConfig+0x1d6>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a64      	ldr	r2, [pc, #400]	; (8003990 <UART_SetConfig+0x28c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d138      	bne.n	8003874 <UART_SetConfig+0x170>
 8003802:	200c      	movs	r0, #12
 8003804:	f7ff fb3a 	bl	8002e7c <LL_RCC_GetUSARTClockSource>
 8003808:	4603      	mov	r3, r0
 800380a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d82c      	bhi.n	800386c <UART_SetConfig+0x168>
 8003812:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <UART_SetConfig+0x114>)
 8003814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003818:	0800384d 	.word	0x0800384d
 800381c:	0800386d 	.word	0x0800386d
 8003820:	0800386d 	.word	0x0800386d
 8003824:	0800386d 	.word	0x0800386d
 8003828:	0800385d 	.word	0x0800385d
 800382c:	0800386d 	.word	0x0800386d
 8003830:	0800386d 	.word	0x0800386d
 8003834:	0800386d 	.word	0x0800386d
 8003838:	08003855 	.word	0x08003855
 800383c:	0800386d 	.word	0x0800386d
 8003840:	0800386d 	.word	0x0800386d
 8003844:	0800386d 	.word	0x0800386d
 8003848:	08003865 	.word	0x08003865
 800384c:	2300      	movs	r3, #0
 800384e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003852:	e042      	b.n	80038da <UART_SetConfig+0x1d6>
 8003854:	2302      	movs	r3, #2
 8003856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800385a:	e03e      	b.n	80038da <UART_SetConfig+0x1d6>
 800385c:	2304      	movs	r3, #4
 800385e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003862:	e03a      	b.n	80038da <UART_SetConfig+0x1d6>
 8003864:	2308      	movs	r3, #8
 8003866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800386a:	e036      	b.n	80038da <UART_SetConfig+0x1d6>
 800386c:	2310      	movs	r3, #16
 800386e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003872:	e032      	b.n	80038da <UART_SetConfig+0x1d6>
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a43      	ldr	r2, [pc, #268]	; (8003988 <UART_SetConfig+0x284>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d12a      	bne.n	80038d4 <UART_SetConfig+0x1d0>
 800387e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003882:	f7ff fb0d 	bl	8002ea0 <LL_RCC_GetLPUARTClockSource>
 8003886:	4603      	mov	r3, r0
 8003888:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800388c:	d01a      	beq.n	80038c4 <UART_SetConfig+0x1c0>
 800388e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003892:	d81b      	bhi.n	80038cc <UART_SetConfig+0x1c8>
 8003894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003898:	d00c      	beq.n	80038b4 <UART_SetConfig+0x1b0>
 800389a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800389e:	d815      	bhi.n	80038cc <UART_SetConfig+0x1c8>
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <UART_SetConfig+0x1a8>
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a8:	d008      	beq.n	80038bc <UART_SetConfig+0x1b8>
 80038aa:	e00f      	b.n	80038cc <UART_SetConfig+0x1c8>
 80038ac:	2300      	movs	r3, #0
 80038ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038b2:	e012      	b.n	80038da <UART_SetConfig+0x1d6>
 80038b4:	2302      	movs	r3, #2
 80038b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ba:	e00e      	b.n	80038da <UART_SetConfig+0x1d6>
 80038bc:	2304      	movs	r3, #4
 80038be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038c2:	e00a      	b.n	80038da <UART_SetConfig+0x1d6>
 80038c4:	2308      	movs	r3, #8
 80038c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ca:	e006      	b.n	80038da <UART_SetConfig+0x1d6>
 80038cc:	2310      	movs	r3, #16
 80038ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038d2:	e002      	b.n	80038da <UART_SetConfig+0x1d6>
 80038d4:	2310      	movs	r3, #16
 80038d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2a      	ldr	r2, [pc, #168]	; (8003988 <UART_SetConfig+0x284>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	f040 80a4 	bne.w	8003a2e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d823      	bhi.n	8003936 <UART_SetConfig+0x232>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <UART_SetConfig+0x1f0>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003919 	.word	0x08003919
 80038f8:	08003937 	.word	0x08003937
 80038fc:	08003921 	.word	0x08003921
 8003900:	08003937 	.word	0x08003937
 8003904:	08003927 	.word	0x08003927
 8003908:	08003937 	.word	0x08003937
 800390c:	08003937 	.word	0x08003937
 8003910:	08003937 	.word	0x08003937
 8003914:	0800392f 	.word	0x0800392f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003918:	f7fe ffcc 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 800391c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800391e:	e010      	b.n	8003942 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003920:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <UART_SetConfig+0x290>)
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003924:	e00d      	b.n	8003942 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003926:	f7fe ff11 	bl	800274c <HAL_RCC_GetSysClockFreq>
 800392a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800392c:	e009      	b.n	8003942 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800392e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003934:	e005      	b.n	8003942 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003940:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8137 	beq.w	8003bb8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	4a12      	ldr	r2, [pc, #72]	; (8003998 <UART_SetConfig+0x294>)
 8003950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003954:	461a      	mov	r2, r3
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	fbb3 f3f2 	udiv	r3, r3, r2
 800395c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4413      	add	r3, r2
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	429a      	cmp	r2, r3
 800396c:	d305      	bcc.n	800397a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	429a      	cmp	r2, r3
 8003978:	d910      	bls.n	800399c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003980:	e11a      	b.n	8003bb8 <UART_SetConfig+0x4b4>
 8003982:	bf00      	nop
 8003984:	cfff69f3 	.word	0xcfff69f3
 8003988:	40008000 	.word	0x40008000
 800398c:	40013800 	.word	0x40013800
 8003990:	40004400 	.word	0x40004400
 8003994:	00f42400 	.word	0x00f42400
 8003998:	08004868 	.word	0x08004868
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	2200      	movs	r2, #0
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	60fa      	str	r2, [r7, #12]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	4a8e      	ldr	r2, [pc, #568]	; (8003be4 <UART_SetConfig+0x4e0>)
 80039aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2200      	movs	r2, #0
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039be:	f7fc fbe3 	bl	8000188 <__aeabi_uldivmod>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4610      	mov	r0, r2
 80039c8:	4619      	mov	r1, r3
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	020b      	lsls	r3, r1, #8
 80039d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80039d8:	0202      	lsls	r2, r0, #8
 80039da:	6979      	ldr	r1, [r7, #20]
 80039dc:	6849      	ldr	r1, [r1, #4]
 80039de:	0849      	lsrs	r1, r1, #1
 80039e0:	2000      	movs	r0, #0
 80039e2:	460c      	mov	r4, r1
 80039e4:	4605      	mov	r5, r0
 80039e6:	eb12 0804 	adds.w	r8, r2, r4
 80039ea:	eb43 0905 	adc.w	r9, r3, r5
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	469a      	mov	sl, r3
 80039f6:	4693      	mov	fp, r2
 80039f8:	4652      	mov	r2, sl
 80039fa:	465b      	mov	r3, fp
 80039fc:	4640      	mov	r0, r8
 80039fe:	4649      	mov	r1, r9
 8003a00:	f7fc fbc2 	bl	8000188 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4613      	mov	r3, r2
 8003a0a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a12:	d308      	bcc.n	8003a26 <UART_SetConfig+0x322>
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1a:	d204      	bcs.n	8003a26 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6a3a      	ldr	r2, [r7, #32]
 8003a22:	60da      	str	r2, [r3, #12]
 8003a24:	e0c8      	b.n	8003bb8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a2c:	e0c4      	b.n	8003bb8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a36:	d168      	bne.n	8003b0a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003a38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d828      	bhi.n	8003a92 <UART_SetConfig+0x38e>
 8003a40:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <UART_SetConfig+0x344>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a6d 	.word	0x08003a6d
 8003a4c:	08003a75 	.word	0x08003a75
 8003a50:	08003a7d 	.word	0x08003a7d
 8003a54:	08003a93 	.word	0x08003a93
 8003a58:	08003a83 	.word	0x08003a83
 8003a5c:	08003a93 	.word	0x08003a93
 8003a60:	08003a93 	.word	0x08003a93
 8003a64:	08003a93 	.word	0x08003a93
 8003a68:	08003a8b 	.word	0x08003a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a6c:	f7fe ff22 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003a70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a72:	e014      	b.n	8003a9e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a74:	f7fe ff30 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 8003a78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a7a:	e010      	b.n	8003a9e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a7c:	4b5a      	ldr	r3, [pc, #360]	; (8003be8 <UART_SetConfig+0x4e4>)
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a80:	e00d      	b.n	8003a9e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a82:	f7fe fe63 	bl	800274c <HAL_RCC_GetSysClockFreq>
 8003a86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a88:	e009      	b.n	8003a9e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a90:	e005      	b.n	8003a9e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8089 	beq.w	8003bb8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	4a4e      	ldr	r2, [pc, #312]	; (8003be4 <UART_SetConfig+0x4e0>)
 8003aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ab8:	005a      	lsls	r2, r3, #1
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	441a      	add	r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	2b0f      	cmp	r3, #15
 8003ad2:	d916      	bls.n	8003b02 <UART_SetConfig+0x3fe>
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ada:	d212      	bcs.n	8003b02 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f023 030f 	bic.w	r3, r3, #15
 8003ae4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	085b      	lsrs	r3, r3, #1
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	8bfb      	ldrh	r3, [r7, #30]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	8bfa      	ldrh	r2, [r7, #30]
 8003afe:	60da      	str	r2, [r3, #12]
 8003b00:	e05a      	b.n	8003bb8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b08:	e056      	b.n	8003bb8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d827      	bhi.n	8003b62 <UART_SetConfig+0x45e>
 8003b12:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <UART_SetConfig+0x414>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b3d 	.word	0x08003b3d
 8003b1c:	08003b45 	.word	0x08003b45
 8003b20:	08003b4d 	.word	0x08003b4d
 8003b24:	08003b63 	.word	0x08003b63
 8003b28:	08003b53 	.word	0x08003b53
 8003b2c:	08003b63 	.word	0x08003b63
 8003b30:	08003b63 	.word	0x08003b63
 8003b34:	08003b63 	.word	0x08003b63
 8003b38:	08003b5b 	.word	0x08003b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b3c:	f7fe feba 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003b40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b42:	e014      	b.n	8003b6e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b44:	f7fe fec8 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 8003b48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b4a:	e010      	b.n	8003b6e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b4c:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <UART_SetConfig+0x4e4>)
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b50:	e00d      	b.n	8003b6e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b52:	f7fe fdfb 	bl	800274c <HAL_RCC_GetSysClockFreq>
 8003b56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b58:	e009      	b.n	8003b6e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b60:	e005      	b.n	8003b6e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b6c:	bf00      	nop
    }

    if (pclk != 0U)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d021      	beq.n	8003bb8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	4a1a      	ldr	r2, [pc, #104]	; (8003be4 <UART_SetConfig+0x4e0>)
 8003b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	441a      	add	r2, r3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	2b0f      	cmp	r3, #15
 8003b9e:	d908      	bls.n	8003bb2 <UART_SetConfig+0x4ae>
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba6:	d204      	bcs.n	8003bb2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6a3a      	ldr	r2, [r7, #32]
 8003bae:	60da      	str	r2, [r3, #12]
 8003bb0:	e002      	b.n	8003bb8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003bd4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3730      	adds	r7, #48	; 0x30
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be2:	bf00      	nop
 8003be4:	08004868 	.word	0x08004868
 8003be8:	00f42400 	.word	0x00f42400

08003bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01a      	beq.n	8003d02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cea:	d10a      	bne.n	8003d02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
  }
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr

08003d2e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b086      	sub	sp, #24
 8003d32:	af02      	add	r7, sp, #8
 8003d34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d3e:	f7fc ff45 	bl	8000bcc <HAL_GetTick>
 8003d42:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d10e      	bne.n	8003d70 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f82f 	bl	8003dc4 <UART_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e025      	b.n	8003dbc <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d10e      	bne.n	8003d9c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f819 	bl	8003dc4 <UART_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e00f      	b.n	8003dbc <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b09c      	sub	sp, #112	; 0x70
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd4:	e0a9      	b.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	f000 80a5 	beq.w	8003f2a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de0:	f7fc fef4 	bl	8000bcc <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d302      	bcc.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x32>
 8003df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d140      	bne.n	8003e78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e0a:	667b      	str	r3, [r7, #100]	; 0x64
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e16:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e1c:	e841 2300 	strex	r3, r2, [r1]
 8003e20:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e6      	bne.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3308      	adds	r3, #8
 8003e46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e48:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e5      	bne.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e069      	b.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d051      	beq.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e94:	d149      	bne.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e9e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e6      	bne.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3308      	adds	r3, #8
 8003ef0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ef2:	623a      	str	r2, [r7, #32]
 8003ef4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	69f9      	ldr	r1, [r7, #28]
 8003ef8:	6a3a      	ldr	r2, [r7, #32]
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e5      	bne.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e010      	b.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4013      	ands	r3, r2
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	bf0c      	ite	eq
 8003f3a:	2301      	moveq	r3, #1
 8003f3c:	2300      	movne	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	f43f af46 	beq.w	8003dd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3770      	adds	r7, #112	; 0x70
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b096      	sub	sp, #88	; 0x58
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	88fa      	ldrh	r2, [r7, #6]
 8003f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2222      	movs	r2, #34	; 0x22
 8003f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02c      	beq.n	8003fe2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f8c:	4a42      	ldr	r2, [pc, #264]	; (8004098 <UART_Start_Receive_DMA+0x144>)
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f94:	4a41      	ldr	r2, [pc, #260]	; (800409c <UART_Start_Receive_DMA+0x148>)
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f9c:	4a40      	ldr	r2, [pc, #256]	; (80040a0 <UART_Start_Receive_DMA+0x14c>)
 8003f9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3324      	adds	r3, #36	; 0x24
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	461a      	mov	r2, r3
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	f7fc ffc4 	bl	8000f48 <HAL_DMA_Start_IT>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00d      	beq.n	8003fe2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2210      	movs	r2, #16
 8003fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e055      	b.n	800408e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d018      	beq.n	8004024 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffa:	e853 3f00 	ldrex	r3, [r3]
 8003ffe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004006:	657b      	str	r3, [r7, #84]	; 0x54
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004010:	64bb      	str	r3, [r7, #72]	; 0x48
 8004012:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800401e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e6      	bne.n	8003ff2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3308      	adds	r3, #8
 800402a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	653b      	str	r3, [r7, #80]	; 0x50
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3308      	adds	r3, #8
 8004042:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004044:	637a      	str	r2, [r7, #52]	; 0x34
 8004046:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800404a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e5      	bne.n	8004024 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3308      	adds	r3, #8
 800405e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	613b      	str	r3, [r7, #16]
   return(result);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800406e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3308      	adds	r3, #8
 8004076:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004078:	623a      	str	r2, [r7, #32]
 800407a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	69f9      	ldr	r1, [r7, #28]
 800407e:	6a3a      	ldr	r2, [r7, #32]
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	61bb      	str	r3, [r7, #24]
   return(result);
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e5      	bne.n	8004058 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3758      	adds	r7, #88	; 0x58
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	080041ef 	.word	0x080041ef
 800409c:	08004315 	.word	0x08004315
 80040a0:	0800434d 	.word	0x0800434d

080040a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b08f      	sub	sp, #60	; 0x3c
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e6      	bne.n	80040ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3308      	adds	r3, #8
 80040e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040f4:	633b      	str	r3, [r7, #48]	; 0x30
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3308      	adds	r3, #8
 80040fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fe:	61ba      	str	r2, [r7, #24]
 8004100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6979      	ldr	r1, [r7, #20]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	613b      	str	r3, [r7, #16]
   return(result);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e5      	bne.n	80040de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800411a:	bf00      	nop
 800411c:	373c      	adds	r7, #60	; 0x3c
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b095      	sub	sp, #84	; 0x54
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004140:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800414a:	643b      	str	r3, [r7, #64]	; 0x40
 800414c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004150:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e6      	bne.n	800412c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3308      	adds	r3, #8
 8004164:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	61fb      	str	r3, [r7, #28]
   return(result);
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	64bb      	str	r3, [r7, #72]	; 0x48
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3308      	adds	r3, #8
 8004180:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004182:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e3      	bne.n	800415e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800419a:	2b01      	cmp	r3, #1
 800419c:	d118      	bne.n	80041d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f023 0310 	bic.w	r3, r3, #16
 80041b2:	647b      	str	r3, [r7, #68]	; 0x44
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6979      	ldr	r1, [r7, #20]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	613b      	str	r3, [r7, #16]
   return(result);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e6      	bne.n	800419e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80041e4:	bf00      	nop
 80041e6:	3754      	adds	r7, #84	; 0x54
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr

080041ee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b09c      	sub	sp, #112	; 0x70
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d171      	bne.n	80042ee <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800420a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420c:	2200      	movs	r2, #0
 800420e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004222:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004226:	66bb      	str	r3, [r7, #104]	; 0x68
 8004228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004230:	65bb      	str	r3, [r7, #88]	; 0x58
 8004232:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004236:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800423e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e6      	bne.n	8004212 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3308      	adds	r3, #8
 800424a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	667b      	str	r3, [r7, #100]	; 0x64
 800425c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3308      	adds	r3, #8
 8004262:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004264:	647a      	str	r2, [r7, #68]	; 0x44
 8004266:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800426a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e5      	bne.n	8004244 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3308      	adds	r3, #8
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	623b      	str	r3, [r7, #32]
   return(result);
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800428e:	663b      	str	r3, [r7, #96]	; 0x60
 8004290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3308      	adds	r3, #8
 8004296:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004298:	633a      	str	r2, [r7, #48]	; 0x30
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800429e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e5      	bne.n	8004278 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ae:	2220      	movs	r2, #32
 80042b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d118      	bne.n	80042ee <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f023 0310 	bic.w	r3, r3, #16
 80042d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	69b9      	ldr	r1, [r7, #24]
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	e841 2300 	strex	r3, r2, [r1]
 80042e6:	617b      	str	r3, [r7, #20]
   return(result);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e6      	bne.n	80042bc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d107      	bne.n	8004306 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042fc:	4619      	mov	r1, r3
 80042fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004300:	f7fc fa54 	bl	80007ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004304:	e002      	b.n	800430c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004306:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004308:	f7ff f9e1 	bl	80036ce <HAL_UART_RxCpltCallback>
}
 800430c:	bf00      	nop
 800430e:	3770      	adds	r7, #112	; 0x70
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004326:	2b01      	cmp	r3, #1
 8004328:	d109      	bne.n	800433e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004330:	085b      	lsrs	r3, r3, #1
 8004332:	b29b      	uxth	r3, r3
 8004334:	4619      	mov	r1, r3
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7fc fa38 	bl	80007ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800433c:	e002      	b.n	8004344 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f7ff f9ce 	bl	80036e0 <HAL_UART_RxHalfCpltCallback>
}
 8004344:	bf00      	nop
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004360:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004374:	2b80      	cmp	r3, #128	; 0x80
 8004376:	d109      	bne.n	800438c <UART_DMAError+0x40>
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b21      	cmp	r3, #33	; 0x21
 800437c:	d106      	bne.n	800438c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2200      	movs	r2, #0
 8004382:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004386:	6978      	ldr	r0, [r7, #20]
 8004388:	f7ff fe8c 	bl	80040a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d109      	bne.n	80043ae <UART_DMAError+0x62>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b22      	cmp	r3, #34	; 0x22
 800439e:	d106      	bne.n	80043ae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80043a8:	6978      	ldr	r0, [r7, #20]
 80043aa:	f7ff febb 	bl	8004124 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b4:	f043 0210 	orr.w	r2, r3, #16
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043be:	6978      	ldr	r0, [r7, #20]
 80043c0:	f7ff f997 	bl	80036f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043c4:	bf00      	nop
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f7ff f981 	bl	80036f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043f0:	bf00      	nop
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	60bb      	str	r3, [r7, #8]
   return(result);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6979      	ldr	r1, [r7, #20]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	613b      	str	r3, [r7, #16]
   return(result);
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e6      	bne.n	8004400 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff f93b 	bl	80036bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004446:	bf00      	nop
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_UARTEx_DisableFifoMode+0x16>
 8004496:	2302      	movs	r3, #2
 8004498:	e027      	b.n	80044ea <HAL_UARTEx_DisableFifoMode+0x66>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2224      	movs	r2, #36	; 0x24
 80044a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0201 	bic.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80044c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004508:	2302      	movs	r3, #2
 800450a:	e02d      	b.n	8004568 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2224      	movs	r2, #36	; 0x24
 8004518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0201 	bic.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f8ab 	bl	80046a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004584:	2302      	movs	r3, #2
 8004586:	e02d      	b.n	80045e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2224      	movs	r2, #36	; 0x24
 8004594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0201 	bic.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f86d 	bl	80046a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08c      	sub	sp, #48	; 0x30
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	4613      	mov	r3, r2
 80045f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	2b20      	cmp	r3, #32
 8004602:	d14a      	bne.n	800469a <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e043      	b.n	800469c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800461e:	2302      	movs	r3, #2
 8004620:	e03c      	b.n	800469c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	461a      	mov	r2, r3
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7ff fc8c 	bl	8003f54 <UART_Start_Receive_DMA>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004646:	2b00      	cmp	r3, #0
 8004648:	d124      	bne.n	8004694 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d11d      	bne.n	800468e <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2210      	movs	r2, #16
 8004658:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	617b      	str	r3, [r7, #20]
   return(result);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f043 0310 	orr.w	r3, r3, #16
 800466e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
 800467a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6a39      	ldr	r1, [r7, #32]
 800467e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	61fb      	str	r3, [r7, #28]
   return(result);
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e6      	bne.n	800465a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800468c:	e002      	b.n	8004694 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004698:	e000      	b.n	800469c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800469a:	2302      	movs	r3, #2
  }
}
 800469c:	4618      	mov	r0, r3
 800469e:	3730      	adds	r7, #48	; 0x30
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d108      	bne.n	80046c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046c4:	e031      	b.n	800472a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046c6:	2308      	movs	r3, #8
 80046c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046ca:	2308      	movs	r3, #8
 80046cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	0e5b      	lsrs	r3, r3, #25
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	0f5b      	lsrs	r3, r3, #29
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046ee:	7bbb      	ldrb	r3, [r7, #14]
 80046f0:	7b3a      	ldrb	r2, [r7, #12]
 80046f2:	4910      	ldr	r1, [pc, #64]	; (8004734 <UARTEx_SetNbDataToProcess+0x90>)
 80046f4:	5c8a      	ldrb	r2, [r1, r2]
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80046fa:	7b3a      	ldrb	r2, [r7, #12]
 80046fc:	490e      	ldr	r1, [pc, #56]	; (8004738 <UARTEx_SetNbDataToProcess+0x94>)
 80046fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004700:	fb93 f3f2 	sdiv	r3, r3, r2
 8004704:	b29a      	uxth	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	7b7a      	ldrb	r2, [r7, #13]
 8004710:	4908      	ldr	r1, [pc, #32]	; (8004734 <UARTEx_SetNbDataToProcess+0x90>)
 8004712:	5c8a      	ldrb	r2, [r1, r2]
 8004714:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004718:	7b7a      	ldrb	r2, [r7, #13]
 800471a:	4907      	ldr	r1, [pc, #28]	; (8004738 <UARTEx_SetNbDataToProcess+0x94>)
 800471c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800471e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004722:	b29a      	uxth	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800472a:	bf00      	nop
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr
 8004734:	08004880 	.word	0x08004880
 8004738:	08004888 	.word	0x08004888

0800473c <__libc_init_array>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	4d0d      	ldr	r5, [pc, #52]	; (8004774 <__libc_init_array+0x38>)
 8004740:	4c0d      	ldr	r4, [pc, #52]	; (8004778 <__libc_init_array+0x3c>)
 8004742:	1b64      	subs	r4, r4, r5
 8004744:	10a4      	asrs	r4, r4, #2
 8004746:	2600      	movs	r6, #0
 8004748:	42a6      	cmp	r6, r4
 800474a:	d109      	bne.n	8004760 <__libc_init_array+0x24>
 800474c:	4d0b      	ldr	r5, [pc, #44]	; (800477c <__libc_init_array+0x40>)
 800474e:	4c0c      	ldr	r4, [pc, #48]	; (8004780 <__libc_init_array+0x44>)
 8004750:	f000 f820 	bl	8004794 <_init>
 8004754:	1b64      	subs	r4, r4, r5
 8004756:	10a4      	asrs	r4, r4, #2
 8004758:	2600      	movs	r6, #0
 800475a:	42a6      	cmp	r6, r4
 800475c:	d105      	bne.n	800476a <__libc_init_array+0x2e>
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	f855 3b04 	ldr.w	r3, [r5], #4
 8004764:	4798      	blx	r3
 8004766:	3601      	adds	r6, #1
 8004768:	e7ee      	b.n	8004748 <__libc_init_array+0xc>
 800476a:	f855 3b04 	ldr.w	r3, [r5], #4
 800476e:	4798      	blx	r3
 8004770:	3601      	adds	r6, #1
 8004772:	e7f2      	b.n	800475a <__libc_init_array+0x1e>
 8004774:	08004898 	.word	0x08004898
 8004778:	08004898 	.word	0x08004898
 800477c:	08004898 	.word	0x08004898
 8004780:	0800489c 	.word	0x0800489c

08004784 <memset>:
 8004784:	4402      	add	r2, r0
 8004786:	4603      	mov	r3, r0
 8004788:	4293      	cmp	r3, r2
 800478a:	d100      	bne.n	800478e <memset+0xa>
 800478c:	4770      	bx	lr
 800478e:	f803 1b01 	strb.w	r1, [r3], #1
 8004792:	e7f9      	b.n	8004788 <memset+0x4>

08004794 <_init>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	bf00      	nop
 8004798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479a:	bc08      	pop	{r3}
 800479c:	469e      	mov	lr, r3
 800479e:	4770      	bx	lr

080047a0 <_fini>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	bf00      	nop
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr
